name: Build Android APK (CNC Checklist v1.3)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      P4A_DEBUG: "1"
      # Стабильные версии Android SDK (соответствуют buildozer.spec)
      ANDROID_PLATFORM: "android-33"
      ANDROID_BUILD_TOOLS: "34.0.0"
      ANDROID_NDK_VERSION: "25.2.9519653"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare logs dir
        run: |
          mkdir -p logs
          echo "=== CNC Checklist Build Workflow ===" | tee -a logs/summary.txt
          echo "Workflow started at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" | tee -a logs/summary.txt
          echo "Build type: ${{ github.event.inputs.build_type || 'debug' }}" | tee -a logs/summary.txt
          echo "Target Android API: $ANDROID_PLATFORM" | tee -a logs/summary.txt
          echo "Build tools: $ANDROID_BUILD_TOOLS" | tee -a logs/summary.txt
          echo "NDK version: $ANDROID_NDK_VERSION" | tee -a logs/summary.txt

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system deps (Ubuntu 24.04)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            git zip unzip \
            libstdc++6 libffi-dev libssl-dev zlib1g-dev \
            libncurses6 libtinfo6 \
            build-essential \
            python3-dev \
            python3-venv

      - name: System info (env, versions, disk)
        run: |
          mkdir -p logs
          {
            echo "=== ENV ==="; printenv | sort
            echo; echo "=== Versions ==="
            java -version 2>&1 || true
            python --version 2>&1 || true
            pip --version 2>&1 || true
            echo; echo "=== Disk usage ==="
            df -h
          } | tee logs/system_info.txt

      - name: Prepare SDK/NDK folders
        run: |
          set -euxo pipefail
          mkdir -p "$ANDROID_HOME" "$ANDROID_NDK_HOME" logs

      - name: Install Android SDK (alternative method)
        run: |
          set -euxo pipefail
          mkdir -p logs
          cd "$ANDROID_HOME"
          
          echo "== Installing Android SDK using alternative method =="
          
          # Создаем структуру папок
          mkdir -p build-tools platforms ndk platform-tools cmdline-tools/latest/bin
          
          # Скачиваем commandline-tools
          echo "Downloading commandline-tools..."
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d cmdline-tools-tmp
          mv cmdline-tools-tmp/cmdline-tools/* cmdline-tools/latest/
          rm -rf cmdline-tools-tmp cmdtools.zip
          
          # Скачиваем build-tools напрямую
          echo "Downloading build-tools 34.0.0 directly..."
          cd build-tools
          
          # Пробуем несколько URL для build-tools
          BUILD_TOOLS_URLS=(
            "https://dl.google.com/android/repository/build-tools_r34.0.0-linux.zip"
            "https://dl.google.com/android/repository/build-tools_r33.0.2-linux.zip"
            "https://dl.google.com/android/repository/build-tools_r30.0.3-linux.zip"
          )
          
          BUILD_TOOLS_DOWNLOADED=false
          for url in "${BUILD_TOOLS_URLS[@]}"; do
            echo "Trying to download from: $url"
            if curl -sSL "$url" -o build-tools.zip; then
              # Проверяем, что файл скачался и не пустой
              if [ -f "build-tools.zip" ] && [ -s "build-tools.zip" ]; then
                echo "File downloaded, size: $(stat -c%s build-tools.zip) bytes"
                
                # Проверяем, что это валидный zip файл
                if unzip -t build-tools.zip >/dev/null 2>&1; then
                  echo "Valid zip file, extracting..."
                  unzip -q build-tools.zip
                  
                  # Определяем версию и переименовываем папку
                  if [ -d "android-11" ]; then
                    mv android-11 34.0.0
                    echo "✅ build-tools 34.0.0 downloaded and extracted"
                  elif [ -d "android-10" ]; then
                    mv android-10 33.0.2
                    echo "✅ build-tools 33.0.2 downloaded and extracted"
                  elif [ -d "android-9" ]; then
                    mv android-9 30.0.3
                    echo "✅ build-tools 30.0.3 downloaded and extracted"
                  else
                    # Ищем любую папку android-*
                    ANDROID_DIR=$(find . -maxdepth 1 -type d -name "android-*" | head -1)
                    if [ -n "$ANDROID_DIR" ]; then
                      VERSION=$(basename "$ANDROID_DIR" | sed 's/android-//')
                      mv "$ANDROID_DIR" "$VERSION"
                      echo "✅ build-tools $VERSION downloaded and extracted"
                    fi
                  fi
                  
                  rm -f build-tools.zip
                  BUILD_TOOLS_DOWNLOADED=true
                  break
                else
                  echo "Invalid zip file, trying next URL..."
                  rm -f build-tools.zip
                fi
              else
                echo "File download failed or empty, trying next URL..."
                rm -f build-tools.zip
              fi
            else
              echo "Failed to download from $url, trying next URL..."
            fi
          done
          
          if [ "$BUILD_TOOLS_DOWNLOADED" = false ]; then
            echo "❌ Failed to download any build-tools version"
            exit 1
          fi
          
          cd ..
          
          # Скачиваем platform-tools
          echo "Downloading platform-tools..."
          cd platform-tools
          
          PLATFORM_TOOLS_URLS=(
            "https://dl.google.com/android/repository/platform-tools_r34.0.5-linux.zip"
            "https://dl.google.com/android/repository/platform-tools_r33.0.3-linux.zip"
            "https://dl.google.com/android/repository/platform-tools_r30.0.5-linux.zip"
          )
          
          PLATFORM_TOOLS_DOWNLOADED=false
          for url in "${PLATFORM_TOOLS_URLS[@]}"; do
            echo "Trying to download platform-tools from: $url"
            if curl -sSL "$url" -o platform-tools.zip; then
              if [ -f "platform-tools.zip" ] && [ -s "platform-tools.zip" ]; then
                echo "Platform-tools downloaded, size: $(stat -c%s platform-tools.zip) bytes"
                if unzip -t platform-tools.zip >/dev/null 2>&1; then
                  unzip -q platform-tools.zip
                  rm -f platform-tools.zip
                  echo "✅ platform-tools downloaded and extracted"
                  PLATFORM_TOOLS_DOWNLOADED=true
                  break
                else
                  echo "Invalid platform-tools zip file, trying next URL..."
                  rm -f platform-tools.zip
                fi
              else
                echo "Platform-tools download failed or empty, trying next URL..."
                rm -f platform-tools.zip
              fi
            else
              echo "Failed to download platform-tools from $url, trying next URL..."
            fi
          done
          
          if [ "$PLATFORM_TOOLS_DOWNLOADED" = false ]; then
            echo "❌ Failed to download platform-tools"
            exit 1
          fi
          
          cd ..
          
          # Скачиваем platform android-33
          echo "Downloading platform android-33..."
          cd platforms
          
          PLATFORM_URLS=(
            "https://dl.google.com/android/repository/platform-33_r03.zip"
            "https://dl.google.com/android/repository/platform-32_r01.zip"
            "https://dl.google.com/android/repository/platform-31_r01.zip"
          )
          
          PLATFORM_DOWNLOADED=false
          for url in "${PLATFORM_URLS[@]}"; do
            echo "Trying to download platform from: $url"
            if curl -sSL "$url" -o platform.zip; then
              if [ -f "platform.zip" ] && [ -s "platform.zip" ]; then
                echo "Platform downloaded, size: $(stat -c%s platform.zip) bytes"
                if unzip -t platform.zip >/dev/null 2>&1; then
                  unzip -q platform.zip
                  rm -f platform.zip
                  echo "✅ platform downloaded and extracted"
                  PLATFORM_DOWNLOADED=true
                  break
                else
                  echo "Invalid platform zip file, trying next URL..."
                  rm -f platform.zip
                fi
              else
                echo "Platform download failed or empty, trying next URL..."
                rm -f platform.zip
              fi
            else
              echo "Failed to download platform from $url, trying next URL..."
            fi
          done
          
          if [ "$PLATFORM_DOWNLOADED" = false ]; then
            echo "❌ Failed to download platform"
            exit 1
          fi
          
          cd ..
          
          # Проверяем установку
          echo "== Verifying installation =="
          ls -la build-tools/ || true
          ls -la platforms/ || true
          ls -la platform-tools/ || true
          
          # Проверяем sdkmanager
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --version | tee -a logs/system_info.txt || true
          java -version 2>&1 | tee -a logs/system_info.txt || true

      - name: Install NDK (if needed)
        run: |
          set -euo pipefail
          mkdir -p logs
          
          echo "== Installing NDK =="
          cd "$ANDROID_HOME/ndk"
          
          # Скачиваем NDK
          echo "Downloading NDK $ANDROID_NDK_VERSION..."
          curl -sSL "https://dl.google.com/android/repository/android-ndk-$ANDROID_NDK_VERSION-linux.zip" -o ndk.zip
          if [ -f "ndk.zip" ]; then
            unzip -q ndk.zip
            # Переименовываем папку в правильное имя
            if [ -d "android-ndk-$ANDROID_NDK_VERSION" ]; then
              mv "android-ndk-$ANDROID_NDK_VERSION" "$ANDROID_NDK_VERSION"
            fi
            rm -f ndk.zip
            echo "✅ NDK $ANDROID_NDK_VERSION downloaded and extracted"
          fi
          
          # Создаем символическую ссылку на NDK
          ln -s "$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION" "$ANDROID_NDK_HOME" || true
          
          echo "== Final verification =="
          ls -la "$ANDROID_HOME/build-tools/" || true
          ls -la "$ANDROID_HOME/platforms/" || true
          ls -la "$ANDROID_HOME/ndk/" || true
          ls -la "$ANDROID_HOME/platform-tools/" || true
          
          echo "== Check aidl availability =="
          find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null || echo "aidl not found"
          
          echo "== Disk usage =="
          du -sh "$ANDROID_HOME" || true
          df -h || true

      - name: Install buildozer & Python deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip wheel setuptools cython
          python -m pip install buildozer==1.5.0
          
          # Проверяем версии установленных пакетов
          echo "=== Installed Python packages ===" | tee -a logs/system_info.txt
          pip list | grep -E "(buildozer|kivy|pillow|reportlab)" | tee -a logs/system_info.txt

      - name: Verify Android SDK installation
        run: |
          set -euo pipefail
          echo "=== Android SDK Verification ===" | tee -a logs/summary.txt
          
          # Проверяем наличие build-tools
          if [ -d "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS" ]; then
            echo "✅ build-tools $ANDROID_BUILD_TOOLS found" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS/" | tee -a logs/summary.txt
          else
            echo "❌ build-tools $ANDROID_BUILD_TOOLS not found" | tee -a logs/summary.txt
            echo "Available build-tools:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/build-tools/" 2>/dev/null | tee -a logs/summary.txt || echo "No build-tools directory" | tee -a logs/summary.txt
            
            # Попробуем найти любую доступную версию build-tools
            AVAILABLE_BUILD_TOOLS=$(ls "$ANDROID_HOME/build-tools/" 2>/dev/null | head -1 || echo "")
            if [ -n "$AVAILABLE_BUILD_TOOLS" ]; then
              echo "⚠️  Using available build-tools: $AVAILABLE_BUILD_TOOLS" | tee -a logs/summary.txt
              export ANDROID_BUILD_TOOLS="$AVAILABLE_BUILD_TOOLS"
            else
              echo "❌ No build-tools available at all" | tee -a logs/summary.txt
              exit 1
            fi
          fi
          
          # Проверяем наличие aidl
          AIDL_PATH=$(find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null | head -1)
          if [ -n "$AIDL_PATH" ]; then
            echo "✅ aidl found at: $AIDL_PATH" | tee -a logs/summary.txt
            "$AIDL_PATH" --version 2>&1 | tee -a logs/summary.txt || true
          else
            echo "❌ aidl not found" | tee -a logs/summary.txt
            echo "Searching for aidl in all build-tools..." | tee -a logs/summary.txt
            find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null | tee -a logs/summary.txt || echo "No aidl found anywhere" | tee -a logs/summary.txt
            exit 1
          fi
          
          # Проверяем наличие platforms
          if [ -d "$ANDROID_HOME/platforms/$ANDROID_PLATFORM" ]; then
            echo "✅ platform $ANDROID_PLATFORM found" | tee -a logs/summary.txt
          else
            echo "❌ platform $ANDROID_PLATFORM not found" | tee -a logs/summary.txt
            echo "Available platforms:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/platforms/" 2>/dev/null | tee -a logs/summary.txt || echo "No platforms directory" | tee -a logs/summary.txt
            exit 1
          fi
          
          # Проверяем наличие NDK
          if [ -d "$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION" ]; then
            echo "✅ NDK $ANDROID_NDK_VERSION found" | tee -a logs/summary.txt
          else
            echo "❌ NDK $ANDROID_NDK_VERSION not found" | tee -a logs/summary.txt
            echo "Available NDK versions:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/ndk/" 2>/dev/null | tee -a logs/summary.txt || echo "No ndk directory" | tee -a logs/summary.txt
            exit 1
          fi

      - name: Download DejaVuSans.ttf (for Cyrillic PDF)
        run: |
          set -euxo pipefail
          mkdir -p app/assets/fonts logs
          curl -sSL "https://raw.githubusercontent.com/dejavu-fonts/dejavu-fonts/master/ttf/DejaVuSans.ttf" -o app/assets/fonts/DejaVuSans.ttf
          ls -lh app/assets/fonts | tee -a logs/system_info.txt

      - name: Validate buildozer.spec
        run: |
          set -euo pipefail
          test -f buildozer.spec || { echo "buildozer.spec not found"; exit 1; }
          
          echo "=== buildozer.spec validation ===" | tee -a logs/summary.txt
          head -n 10 buildozer.spec | tee -a logs/summary.txt
          
          # Проверяем соответствие версий в buildozer.spec
          python -c "
          import configparser, sys
          cfg = configparser.ConfigParser()
          cfg.read('buildozer.spec', encoding='utf-8')
          
          # Проверяем наличие секций
          assert 'app' in cfg, 'Missing [app] section in buildozer.spec'
          assert 'android' in cfg, 'Missing [android] section in buildozer.spec'
          
          # Проверяем версии Android SDK
          android_api = cfg.get('app', 'android.api', fallback='')
          android_platform = cfg.get('android', 'android.platform', fallback='')
          build_tools = cfg.get('android', 'android.build_tools', fallback='')
          ndk_version = cfg.get('android', 'android.ndk', fallback='')
          
          print(f'Android API: {android_api}')
          print(f'Android Platform: {android_platform}')
          print(f'Build Tools: {build_tools}')
          print(f'NDK Version: {ndk_version}')
          
          # Проверяем соответствие стабильным версиям
          assert android_api == '33', f'Expected android.api=33, got {android_api}'
          assert android_platform == 'android-33', f'Expected android.platform=android-33, got {android_platform}'
          assert build_tools == '34.0.0', f'Expected android.build_tools=34.0.0, got {build_tools}'
          assert ndk_version == '25.2.9519653', f'Expected android.ndk=25.2.9519653, got {ndk_version}'
          
          print('buildozer.spec validation: PASSED')
          " | tee -a logs/summary.txt

      - name: Build APK (verbose, logged)
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        run: |
          set -euo pipefail
          mkdir -p logs
          
          # Определяем тип сборки
          BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
          echo "Building $BUILD_TYPE APK..." | tee -a logs/summary.txt
          
          # Проверяем окружение перед сборкой
          echo "== Pre-build environment check ==" | tee -a logs/buildozer_build.log
          echo "ANDROID_HOME: $ANDROID_HOME" | tee -a logs/buildozer_build.log
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME" | tee -a logs/buildozer_build.log
          echo "Current directory: $(pwd)" | tee -a logs/buildozer_build.log
          echo "Python version: $(python --version)" | tee -a logs/buildozer_build.log
          echo "Buildozer version: $(buildozer --version)" | tee -a logs/buildozer_build.log
          
          # Проверяем наличие buildozer.spec
          if [ ! -f "buildozer.spec" ]; then
            echo "ERROR: buildozer.spec not found!" | tee -a logs/buildozer_build.log
            exit 1
          fi
          
          # Очищаем предыдущие сборки и создаем папку bin
          rm -rf bin .buildozer
          mkdir -p bin
          
          # Сборка с детальным логированием
          echo "== Starting buildozer build ==" | tee -a logs/buildozer_build.log
          if buildozer -v android $BUILD_TYPE 2>&1 | tee -a logs/buildozer_build.log; then
            echo "Buildozer command completed successfully" | tee -a logs/summary.txt
          else
            BUILD_EXIT_CODE=$?
            echo "Buildozer command failed with exit code: $BUILD_EXIT_CODE" | tee -a logs/summary.txt
            echo "Last 50 lines of build log:" | tee -a logs/summary.txt
            tail -50 logs/buildozer_build.log | tee -a logs/summary.txt
            exit $BUILD_EXIT_CODE
          fi
          
          # Проверяем результат сборки
          echo "== Checking build results ==" | tee -a logs/summary.txt
          if [ -d "bin" ] && [ "$(ls -A bin 2>/dev/null)" ]; then
            echo "APK build: SUCCESS - files found in bin/" | tee -a logs/summary.txt
            ls -la bin/ | tee -a logs/summary.txt
            
            # Проверяем конкретные файлы
            APK_FILES=$(find bin -name "*.apk" 2>/dev/null || true)
            AAB_FILES=$(find bin -name "*.aab" 2>/dev/null || true)
            
            if [ -n "$APK_FILES" ]; then
              echo "APK files found:" | tee -a logs/summary.txt
              echo "$APK_FILES" | tee -a logs/summary.txt
            fi
            
            if [ -n "$AAB_FILES" ]; then
              echo "AAB files found:" | tee -a logs/summary.txt
              echo "$AAB_FILES" | tee -a logs/summary.txt
            fi
          else
            echo "APK build: FAILED - no files found in bin/" | tee -a logs/summary.txt
            echo "bin directory contents:" | tee -a logs/summary.txt
            ls -la bin/ 2>/dev/null | tee -a logs/summary.txt || echo "bin directory does not exist" | tee -a logs/summary.txt
            exit 1
          fi

      - name: List build outputs
        run: |
          mkdir -p logs
          echo "=== Build Outputs ===" | tee -a logs/summary.txt
          ls -la bin | tee -a logs/summary.txt || true
          
          # Проверяем размер APK файлов
          if [ -d "bin" ]; then
            echo "=== APK File Sizes ===" | tee -a logs/summary.txt
            find bin -name "*.apk" -exec ls -lh {} \; | tee -a logs/summary.txt
          fi
          
          echo "Build finished at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" | tee -a logs/summary.txt

      - name: Job summary (quick view)
        if: always()
        run: |
          {
            echo "## CNC Checklist v1.3 – CI Build Summary"
            echo ""
            echo "**Build Type**: ${{ github.event.inputs.build_type || 'debug' }}"
            echo "**System**: Java $(java -version 2>&1 | head -n1), Python $(python --version 2>&1)"
            echo "**Android SDK**: Platform $ANDROID_PLATFORM, Build Tools $ANDROID_BUILD_TOOLS, NDK $ANDROID_NDK_VERSION"
            echo "**SDK root**: $ANDROID_HOME"
            echo ""
            echo "**Build Outputs**:"
            if [ -d "bin" ]; then
              ls -la bin || echo "bin/ directory exists but is empty"
            else
              echo "No bin/ directory found"
            fi
            echo ""
            echo "**Build Status**: ${{ job.status }}"
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload APK/AAB artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cnc-checklist-v1.3-${{ github.event.inputs.build_type || 'debug' }}-apk
          path: |
            bin/*.apk
            bin/*.aab
          if-no-files-found: warn
          retention-days: 30

      - name: Upload CI logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cnc-checklist-v1.3-ci-logs
          path: |
            logs/** 
            .buildozer/**/*.log
            .buildozer/**/build*.txt
            .buildozer/android/platform/python-for-android/*.log
          if-no-files-found: warn
          retention-days: 7

          