name: Build Android APK (CNC Checklist v1.3)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      P4A_DEBUG: "1"
      # Стабильные версии Android SDK (соответствуют buildozer.spec)
      ANDROID_PLATFORM: "android-33"
      ANDROID_BUILD_TOOLS: "34.0.0"
      ANDROID_NDK_VERSION: "25.2.9519653"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare logs dir
        run: |
          mkdir -p logs
          echo "=== CNC Checklist Build Workflow ===" | tee -a logs/summary.txt
          echo "Workflow started at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" | tee -a logs/summary.txt
          echo "Build type: ${{ github.event.inputs.build_type || 'debug' }}" | tee -a logs/summary.txt
          echo "Target Android API: $ANDROID_PLATFORM" | tee -a logs/summary.txt
          echo "Build tools: $ANDROID_BUILD_TOOLS" | tee -a logs/summary.txt
          echo "NDK version: $ANDROID_NDK_VERSION" | tee -a logs/summary.txt

      - name: Set up Java 17 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install system deps (Ubuntu 24.04)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            git zip unzip \
            libstdc++6 libffi-dev libssl-dev zlib1g-dev \
            libncurses6 libtinfo6 \
            build-essential \
            python3-dev \
            python3-venv

      - name: System info (env, versions, disk)
        run: |
          mkdir -p logs
          {
            echo "=== ENV ==="; printenv | sort
            echo; echo "=== Versions ==="
            java -version 2>&1 || true
            python --version 2>&1 || true
            pip --version 2>&1 || true
            echo; echo "=== Disk usage ==="
            df -h
          } | tee logs/system_info.txt

      - name: Prepare SDK/NDK folders
        run: |
          set -euxo pipefail
          mkdir -p "$ANDROID_HOME" "$ANDROID_NDK_HOME" logs

      - name: Install Android commandline-tools (stable version)
        run: |
          set -euxo pipefail
          mkdir -p logs
          cd "$ANDROID_HOME"
          
          # Попробуем более старую стабильную версию commandline-tools
          echo "Downloading commandline-tools 9477386 (stable version)..."
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdtools.zip
          
          mkdir -p cmdline-tools
          unzip -q cmdtools.zip -d cmdline-tools-tmp
          mv cmdline-tools-tmp/cmdline-tools cmdline-tools/latest
          rm -rf cmdline-tools-tmp cmdtools.zip
          
          # Проверяем установку
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --version | tee -a logs/system_info.txt || true
          java -version 2>&1 | tee -a logs/system_info.txt || true
          
          # Создаем необходимые папки вручную
          mkdir -p build-tools platforms ndk platform-tools
          echo "Created Android SDK directories manually"

      - name: Accept licenses & install SDK/NDK (robust, logged)
        env:
          SDKM: ${{ env.ANDROID_HOME }}/cmdline-tools/latest/bin/sdkmanager
          SDKROOT: ${{ env.ANDROID_HOME }}
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        run: |
          set -euo pipefail
          mkdir -p logs
          exec &> >(tee -a logs/sdkmanager_install.log)
          
          echo "== Environment setup =="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "SDKROOT: $SDKROOT"
          echo "SDKM: $SDKM"
          echo "Current user: $(whoami)"
          echo "Current directory: $(pwd)"
          echo "Directory permissions:"
          ls -la "$ANDROID_HOME" || true

          echo "== Accept licenses (multiple attempts) =="
          # Принимаем лицензии с несколькими попытками
          for i in 1 2 3; do
            echo "License acceptance attempt $i"
            echo "y" | "$SDKM" --sdk_root="$SDKROOT" --licenses && break || {
              echo "WARN: License acceptance attempt $i failed; retrying..."
              sleep 3
            }
          done
          
          # Дополнительная проверка лицензий
          echo "== Verifying license acceptance =="
          echo "y" | "$SDKM" --sdk_root="$SDKROOT" --licenses || true

          # Проверяем доступные пакеты
          echo "== Available packages =="
          "$SDKM" --sdk_root="$SDKROOT" --list | grep -E "(build-tools|platforms|ndk)" | head -20 || true
          
          # Проверяем доступные версии build-tools
          echo "== Available build-tools versions =="
          "$SDKM" --sdk_root="$SDKROOT" --list | grep "build-tools" | head -10 || true

          install_pkg() {
            pkg="$1"
            echo "== Installing: $pkg =="
            for i in 1 2 3; do
              echo "Attempt $i for $pkg"
              
              # Устанавливаем пакет
              if "$SDKM" --sdk_root="$SDKROOT" --install "$pkg" --verbose; then
                echo "SUCCESS: $pkg installation command completed"
                
                # Проверяем, что пакет действительно установился
                if echo "$pkg" | grep -q "build-tools"; then
                  VERSION=$(echo "$pkg" | cut -d';' -f2)
                  echo "Checking for build-tools directory: $SDKROOT/build-tools/$VERSION"
                  if [ -d "$SDKROOT/build-tools/$VERSION" ]; then
                    echo "VERIFIED: build-tools $VERSION directory exists"
                    ls -la "$SDKROOT/build-tools/$VERSION/" | head -5
                  else
                    echo "WARNING: build-tools $VERSION directory not found after installation"
                    echo "Available build-tools directories:"
                    ls -la "$SDKROOT/build-tools/" 2>/dev/null || echo "No build-tools directory"
                  fi
                elif echo "$pkg" | grep -q "platforms"; then
                  VERSION=$(echo "$pkg" | cut -d';' -f2)
                  if [ -d "$SDKROOT/platforms/$VERSION" ]; then
                    echo "VERIFIED: platform $VERSION directory exists"
                  else
                    echo "WARNING: platform $VERSION directory not found after installation"
                  fi
                elif echo "$pkg" | grep -q "ndk"; then
                  VERSION=$(echo "$pkg" | cut -d';' -f2)
                  if [ -d "$SDKROOT/ndk/$VERSION" ]; then
                    echo "VERIFIED: NDK $VERSION directory exists"
                  else
                    echo "WARNING: NDK $VERSION directory not found after installation"
                  fi
                fi
                break
              else
                echo "WARN: attempt $i failed for $pkg; retrying in 5s..."
                sleep 5
              fi
            done
          }

          # Устанавливаем только необходимые пакеты
          install_pkg "platform-tools"
          install_pkg "platforms;$ANDROID_PLATFORM"
          
          # Специальная обработка build-tools
          echo "== Installing build-tools with fallback =="
          BUILD_TOOLS_INSTALLED=false
          
          # Пробуем установить нужную версию
          if install_pkg "build-tools;$ANDROID_BUILD_TOOLS"; then
            if [ -d "$SDKROOT/build-tools/$ANDROID_BUILD_TOOLS" ]; then
              BUILD_TOOLS_INSTALLED=true
              echo "✅ Target build-tools $ANDROID_BUILD_TOOLS installed successfully"
            fi
          fi
          
          # Если не получилось, пробуем установить любую доступную версию
          if [ "$BUILD_TOOLS_INSTALLED" = false ]; then
            echo "== Trying to install any available build-tools =="
            AVAILABLE_VERSIONS=$("$SDKM" --sdk_root="$SDKROOT" --list | grep "build-tools" | head -5 | cut -d'|' -f1 | tr -d ' ' || true)
            
            for version in $AVAILABLE_VERSIONS; do
              if [ -n "$version" ] && [ "$version" != "build-tools" ]; then
                echo "Trying to install $version"
                if install_pkg "$version"; then
                  if [ -d "$SDKROOT/build-tools" ] && [ "$(ls -A "$SDKROOT/build-tools" 2>/dev/null)" ]; then
                    BUILD_TOOLS_INSTALLED=true
                    echo "✅ Successfully installed $version"
                    break
                  fi
                fi
              fi
            done
          fi
          
          # Если все еще не получилось, попробуем альтернативный способ
          if [ "$BUILD_TOOLS_INSTALLED" = false ]; then
            echo "== Trying alternative installation method =="
            echo "Installing build-tools without --install flag..."
            
            # Пробуем без флага --install
            "$SDKM" --sdk_root="$SDKROOT" "build-tools;34.0.0" || true
            "$SDKM" --sdk_root="$SDKROOT" "build-tools;33.0.2" || true
            "$SDKM" --sdk_root="$SDKROOT" "build-tools;30.0.3" || true
            
            # Проверяем результат
            if [ -d "$SDKROOT/build-tools" ] && [ "$(ls -A "$SDKROOT/build-tools" 2>/dev/null)" ]; then
              BUILD_TOOLS_INSTALLED=true
              echo "✅ Alternative installation successful"
            fi
          fi
          
          if [ "$BUILD_TOOLS_INSTALLED" = false ]; then
            echo "❌ Failed to install any build-tools"
            echo "Available build-tools from sdkmanager:"
            "$SDKM" --sdk_root="$SDKROOT" --list | grep "build-tools" || true
          fi
          
          install_pkg "ndk;$ANDROID_NDK_VERSION"

          # Создаем символическую ссылку на NDK
          ln -s "$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION" "$ANDROID_NDK_HOME" || true
          
          # Удаляем нестабильные версии build-tools если они установились
          rm -rf "$ANDROID_HOME/build-tools/36.1.0-rc1" || true
          rm -rf "$ANDROID_HOME/build-tools/36.1.0" || true

          echo "== Post-installation diagnostics =="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "SDKROOT: $SDKROOT"
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la "$ANDROID_HOME" || true
          
          echo "== Verify installed packages =="
          if [ -d "$ANDROID_HOME/build-tools" ]; then
            echo "build-tools directory exists:"
            ls -la "$ANDROID_HOME/build-tools/" || true
          else
            echo "❌ build-tools directory does not exist!"
            echo "Trying to create it manually..."
            mkdir -p "$ANDROID_HOME/build-tools" || true
          fi
          
          if [ -d "$ANDROID_HOME/platforms" ]; then
            echo "platforms directory exists:"
            ls -la "$ANDROID_HOME/platforms/" || true
          else
            echo "❌ platforms directory does not exist!"
          fi
          
          if [ -d "$ANDROID_HOME/ndk" ]; then
            echo "ndk directory exists:"
            ls -la "$ANDROID_HOME/ndk/" || true
          else
            echo "❌ ndk directory does not exist!"
          fi
          
          echo "== Check aidl availability =="
          find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null || echo "aidl not found"
          
          echo "== Disk usage =="
          du -sh "$ANDROID_HOME" || true
          df -h || true
          
          echo "== Final sdkmanager list =="
          "$SDKM" --sdk_root="$SDKROOT" --list | grep -E "(build-tools|platforms|ndk)" | head -10 || true
          
          # Если build-tools не установились, попробуем альтернативный способ
          if [ ! -d "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS" ]; then
            echo "== Attempting alternative build-tools installation =="
            echo "Installing build-tools without --install flag..."
            "$SDKM" --sdk_root="$SDKROOT" "build-tools;$ANDROID_BUILD_TOOLS" || true
            
            # Проверяем еще раз
            if [ -d "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS" ]; then
              echo "✅ Alternative installation successful"
            else
              echo "❌ Alternative installation also failed"
              echo "Available build-tools versions:"
              "$SDKM" --sdk_root="$SDKROOT" --list | grep "build-tools" || true
            fi
          fi
          
          # Финальная проверка и создание папок
          echo "== Final directory structure check =="
          mkdir -p "$ANDROID_HOME/build-tools" "$ANDROID_HOME/platforms" "$ANDROID_HOME/ndk" "$ANDROID_HOME/platform-tools"
          
          # Проверяем, есть ли хотя бы что-то в папках
          if [ ! "$(ls -A "$ANDROID_HOME/build-tools" 2>/dev/null)" ]; then
            echo "⚠️  build-tools directory is empty, trying to download manually..."
            # Попробуем скачать build-tools напрямую
            cd "$ANDROID_HOME/build-tools"
            curl -sSL "https://dl.google.com/android/repository/build-tools_r34.0.0-linux.zip" -o build-tools-34.0.0.zip || true
            if [ -f "build-tools-34.0.0.zip" ]; then
              unzip -q build-tools-34.0.0.zip || true
              rm -f build-tools-34.0.0.zip || true
              echo "✅ Downloaded build-tools manually"
            fi
          fi

      - name: Install buildozer & Python deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip wheel setuptools cython
          python -m pip install buildozer==1.5.0
          
          # Проверяем версии установленных пакетов
          echo "=== Installed Python packages ===" | tee -a logs/system_info.txt
          pip list | grep -E "(buildozer|kivy|pillow|reportlab)" | tee -a logs/system_info.txt

      - name: Verify Android SDK installation
        env:
          SDKM: ${{ env.ANDROID_HOME }}/cmdline-tools/latest/bin/sdkmanager
          SDKROOT: ${{ env.ANDROID_HOME }}
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
        run: |
          set -euo pipefail
          echo "=== Android SDK Verification ===" | tee -a logs/summary.txt
          
          # Проверяем наличие build-tools
          if [ -d "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS" ]; then
            echo "✅ build-tools $ANDROID_BUILD_TOOLS found" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS/" | tee -a logs/summary.txt
          else
            echo "❌ build-tools $ANDROID_BUILD_TOOLS not found" | tee -a logs/summary.txt
            echo "Available build-tools:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/build-tools/" 2>/dev/null | tee -a logs/summary.txt || echo "No build-tools directory" | tee -a logs/summary.txt
            
            # Попробуем найти любую доступную версию build-tools
            AVAILABLE_BUILD_TOOLS=$(ls "$ANDROID_HOME/build-tools/" 2>/dev/null | head -1 || echo "")
            if [ -n "$AVAILABLE_BUILD_TOOLS" ]; then
              echo "⚠️  Using available build-tools: $AVAILABLE_BUILD_TOOLS" | tee -a logs/summary.txt
              export ANDROID_BUILD_TOOLS="$AVAILABLE_BUILD_TOOLS"
            else
              echo "❌ No build-tools available at all" | tee -a logs/summary.txt
              echo "Trying to install build-tools manually..." | tee -a logs/summary.txt
              
              # Попробуем установить build-tools вручную
              echo "Accepting licenses before manual installation..."
              echo "y" | "$SDKM" --sdk_root="$SDKROOT" --licenses || true
              
              echo "Trying to install build-tools 34.0.0..."
              "$SDKM" --sdk_root="$SDKROOT" --install "build-tools;34.0.0" || true
              
              echo "Trying to install build-tools 33.0.2..."
              "$SDKM" --sdk_root="$SDKROOT" --install "build-tools;33.0.2" || true
              
              echo "Trying to install build-tools 33.0.1..."
              "$SDKM" --sdk_root="$SDKROOT" --install "build-tools;33.0.1" || true
              
              echo "Trying to install build-tools 30.0.3..."
              "$SDKM" --sdk_root="$SDKROOT" --install "build-tools;30.0.3" || true
              
              # Проверяем еще раз
              AVAILABLE_BUILD_TOOLS=$(ls "$ANDROID_HOME/build-tools/" 2>/dev/null | head -1 || echo "")
              if [ -n "$AVAILABLE_BUILD_TOOLS" ]; then
                echo "✅ Successfully installed build-tools: $AVAILABLE_BUILD_TOOLS" | tee -a logs/summary.txt
                export ANDROID_BUILD_TOOLS="$AVAILABLE_BUILD_TOOLS"
              else
                echo "❌ Still no build-tools available after manual installation" | tee -a logs/summary.txt
                exit 1
              fi
            fi
          fi
          
          # Проверяем наличие aidl
          AIDL_PATH=$(find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null | head -1)
          if [ -n "$AIDL_PATH" ]; then
            echo "✅ aidl found at: $AIDL_PATH" | tee -a logs/summary.txt
            "$AIDL_PATH" --version 2>&1 | tee -a logs/summary.txt || true
          else
            echo "❌ aidl not found" | tee -a logs/summary.txt
            echo "Searching for aidl in all build-tools..." | tee -a logs/summary.txt
            find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null | tee -a logs/summary.txt || echo "No aidl found anywhere" | tee -a logs/summary.txt
            exit 1
          fi
          
          # Проверяем наличие platforms
          if [ -d "$ANDROID_HOME/platforms/$ANDROID_PLATFORM" ]; then
            echo "✅ platform $ANDROID_PLATFORM found" | tee -a logs/summary.txt
          else
            echo "❌ platform $ANDROID_PLATFORM not found" | tee -a logs/summary.txt
            echo "Available platforms:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/platforms/" 2>/dev/null | tee -a logs/summary.txt || echo "No platforms directory" | tee -a logs/summary.txt
            exit 1
          fi
          
          # Проверяем наличие NDK
          if [ -d "$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION" ]; then
            echo "✅ NDK $ANDROID_NDK_VERSION found" | tee -a logs/summary.txt
          else
            echo "❌ NDK $ANDROID_NDK_VERSION not found" | tee -a logs/summary.txt
            echo "Available NDK versions:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/ndk/" 2>/dev/null | tee -a logs/summary.txt || echo "No ndk directory" | tee -a logs/summary.txt
            exit 1
          fi

      - name: Download DejaVuSans.ttf (for Cyrillic PDF)
        run: |
          set -euxo pipefail
          mkdir -p app/assets/fonts logs
          curl -sSL "https://raw.githubusercontent.com/dejavu-fonts/dejavu-fonts/master/ttf/DejaVuSans.ttf" -o app/assets/fonts/DejaVuSans.ttf
          ls -lh app/assets/fonts | tee -a logs/system_info.txt

      - name: Validate buildozer.spec
        run: |
          set -euo pipefail
          test -f buildozer.spec || { echo "buildozer.spec not found"; exit 1; }
          
          echo "=== buildozer.spec validation ===" | tee -a logs/summary.txt
          head -n 10 buildozer.spec | tee -a logs/summary.txt
          
          # Проверяем соответствие версий в buildozer.spec
          python -c "
          import configparser, sys
          cfg = configparser.ConfigParser()
          cfg.read('buildozer.spec', encoding='utf-8')
          
          # Проверяем наличие секций
          assert 'app' in cfg, 'Missing [app] section in buildozer.spec'
          assert 'android' in cfg, 'Missing [android] section in buildozer.spec'
          
          # Проверяем версии Android SDK
          android_api = cfg.get('app', 'android.api', fallback='')
          android_platform = cfg.get('android', 'android.platform', fallback='')
          build_tools = cfg.get('android', 'android.build_tools', fallback='')
          ndk_version = cfg.get('android', 'android.ndk', fallback='')
          
          print(f'Android API: {android_api}')
          print(f'Android Platform: {android_platform}')
          print(f'Build Tools: {build_tools}')
          print(f'NDK Version: {ndk_version}')
          
          # Проверяем соответствие стабильным версиям
          assert android_api == '33', f'Expected android.api=33, got {android_api}'
          assert android_platform == 'android-33', f'Expected android.platform=android-33, got {android_platform}'
          assert build_tools == '34.0.0', f'Expected android.build_tools=34.0.0, got {build_tools}'
          assert ndk_version == '25.2.9519653', f'Expected android.ndk=25.2.9519653, got {ndk_version}'
          
          print('buildozer.spec validation: PASSED')
          " | tee -a logs/summary.txt

      - name: Build APK (verbose, logged)
        run: |
          set -euo pipefail
          mkdir -p logs
          
          # Определяем тип сборки
          BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
          echo "Building $BUILD_TYPE APK..." | tee -a logs/summary.txt
          
          # Сборка с детальным логированием
          ( set -x; buildozer -v android $BUILD_TYPE ) 2>&1 | tee logs/buildozer_build.log
          
          # Проверяем результат сборки
          if [ -f "bin/*.apk" ]; then
            echo "APK build: SUCCESS" | tee -a logs/summary.txt
            ls -la bin/*.apk | tee -a logs/summary.txt
          else
            echo "APK build: FAILED - no APK files found" | tee -a logs/summary.txt
            exit 1
          fi

      - name: List build outputs
        run: |
          mkdir -p logs
          echo "=== Build Outputs ===" | tee -a logs/summary.txt
          ls -la bin | tee -a logs/summary.txt || true
          
          # Проверяем размер APK файлов
          if [ -d "bin" ]; then
            echo "=== APK File Sizes ===" | tee -a logs/summary.txt
            find bin -name "*.apk" -exec ls -lh {} \; | tee -a logs/summary.txt
          fi
          
          echo "Build finished at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" | tee -a logs/summary.txt

      - name: Job summary (quick view)
        if: always()
        run: |
          {
            echo "## CNC Checklist v1.3 – CI Build Summary"
            echo ""
            echo "**Build Type**: ${{ github.event.inputs.build_type || 'debug' }}"
            echo "**System**: Java $(java -version 2>&1 | head -n1), Python $(python --version 2>&1)"
            echo "**Android SDK**: Platform $ANDROID_PLATFORM, Build Tools $ANDROID_BUILD_TOOLS, NDK $ANDROID_NDK_VERSION"
            echo "**SDK root**: $ANDROID_HOME"
            echo ""
            echo "**Build Outputs**:"
            if [ -d "bin" ]; then
              ls -la bin || echo "bin/ directory exists but is empty"
            else
              echo "No bin/ directory found"
            fi
            echo ""
            echo "**Build Status**: ${{ job.status }}"
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload APK/AAB artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cnc-checklist-v1.3-${{ github.event.inputs.build_type || 'debug' }}-apk
          path: |
            bin/*.apk
            bin/*.aab
          if-no-files-found: warn
          retention-days: 30

      - name: Upload CI logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cnc-checklist-v1.3-ci-logs
          path: |
            logs/** 
            .buildozer/**/*.log
            .buildozer/**/build*.txt
            .buildozer/android/platform/python-for-android/*.log
          if-no-files-found: warn
          retention-days: 7

          