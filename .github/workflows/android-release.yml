name: Build Android APK (CNC Checklist v1.3)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_NDK_HOME: ${{ github.workspace }}/android-ndk
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      P4A_DEBUG: "1"
      # Стабильные версии Android SDK (соответствуют buildozer.spec)
      ANDROID_PLATFORM: "android-32"
      ANDROID_BUILD_TOOLS: "34.0.0"
      ANDROID_NDK_VERSION: "25.2.9519653"
      ANDROIDAPI: "32"
      ANDROIDMINAPI: "26"
      # Обход проблем с libffi
      LIBFFI_CFLAGS: "-I/usr/include/arm-linux-gnueabihf"
      LIBFFI_LIBS: "-lffi"
      # Полное исключение libffi
      P4A_LIBFFI_SKIP: "1"
      P4A_USE_SYSTEM_LIBFFI: "1"
      P4A_RECIPE_BLACKLIST: "libffi"
      # Отключаем проблемные макросы autoconf
      AUTOCONF_VERSION: "2.71"
      AUTOMAKE_VERSION: "1.16"
      LT_SYS_SYMBOL_USCORE: "no"
      # Используем sdl2 bootstrap для Kivy
      P4A_BOOTSTRAP: "sdl2"
      # Используем стабильную ветку python-for-android
      P4A_BRANCH: "master"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare logs dir
        run: |
          mkdir -p logs
          echo "=== CNC Checklist Build Workflow ===" | tee -a logs/summary.txt
          echo "Workflow started at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" | tee -a logs/summary.txt
          echo "Build type: ${{ github.event.inputs.build_type || 'debug' }}" | tee -a logs/summary.txt
          echo "Target Android API: $ANDROID_PLATFORM" | tee -a logs/summary.txt
          echo "Build tools: $ANDROID_BUILD_TOOLS" | tee -a logs/summary.txt
          echo "NDK version: $ANDROID_NDK_VERSION" | tee -a logs/summary.txt

      - name: Set up Java 11 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Verify Java 11 setup
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          which javac
          java -version
          javac -version

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install build tools for libffi
        run: |
          set -euxo pipefail
          sudo apt-get update
          # Устанавливаем более новые версии autotools
          sudo apt-get install -y autoconf automake libtool libtool-bin pkg-config autoconf-archive
          # Устанавливаем дополнительные пакеты для libffi
          sudo apt-get install -y libffi-dev libffi8
          # Проверяем версии
          autoconf --version
          automake --version
          libtool --version || echo "libtool not found, trying libtool-bin"
          libtool-bin --version || echo "libtool-bin not found"
          # Проверяем доступность libtool
          which libtool || which libtool-bin || echo "No libtool found in PATH"
          # Создаем символическую ссылку если нужно
          if ! which libtool && which libtool-bin; then
            sudo ln -sf $(which libtool-bin) /usr/bin/libtool
            echo "Created symlink: libtool -> libtool-bin"
          fi
          # Проверяем libffi
          pkg-config --modversion libffi || echo "libffi not found via pkg-config"

      - name: Install system deps (Ubuntu 24.04)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            git zip unzip \
            libstdc++6 libffi-dev libssl-dev zlib1g-dev \
            libncurses6 libtinfo6 \
            build-essential \
            python3-dev \
            python3-venv \
            libbz2-dev libreadline-dev libsqlite3-dev \
            libncurses5-dev libncursesw5-dev \
            xz-utils tk-dev libxml2-dev libxmlsec1-dev \
            liblzma-dev pkg-config autoconf automake \
            libtool cmake ninja-build ccache \
            wget curl file \
            libc6-dev libc6-dev-i386 \
            lib32stdc++6 lib32z1 \
            lib32gcc-s1 lib32tinfo6 \
            libc6-dev-armhf-cross gcc-arm-linux-gnueabihf \
            g++-arm-linux-gnueabihf \
            libc6-dev-arm64-cross gcc-aarch64-linux-gnu \
            g++-aarch64-linux-gnu \
            libgdbm-dev uuid-dev

      - name: System info (env, versions, disk)
        run: |
          mkdir -p logs
          {
            echo "=== ENV ==="; printenv | sort
            echo; echo "=== Versions ==="
            java -version 2>&1 || true
            python --version 2>&1 || true
            pip --version 2>&1 || true
            echo; echo "=== Disk usage ==="
            df -h
          } | tee logs/system_info.txt

      - name: Prepare SDK/NDK folders
        run: |
          set -euxo pipefail
          mkdir -p "$ANDROID_HOME" "$ANDROID_NDK_HOME" logs

      - name: Install Android SDK (alternative method)
        run: |
          set -euxo pipefail
          mkdir -p logs
          echo "== Starting Android SDK installation ==" | tee -a logs/system_info.txt
          cd "$ANDROID_HOME"
          
          echo "== Installing Android SDK using alternative method =="
          
          # Создаем структуру папок
          mkdir -p build-tools platforms ndk platform-tools cmdline-tools/latest/bin
          
          # Скачиваем commandline-tools
          echo "Downloading commandline-tools..."
          curl -sSL https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -o cmdtools.zip
          unzip -q cmdtools.zip -d cmdline-tools-tmp
          mv cmdline-tools-tmp/cmdline-tools/* cmdline-tools/latest/
          rm -rf cmdline-tools-tmp cmdtools.zip
          
          # Скачиваем build-tools напрямую
          echo "Downloading build-tools 34.0.0 directly..."
          cd build-tools
          
          # Пробуем несколько URL для build-tools
          BUILD_TOOLS_URLS=(
            "https://dl.google.com/android/repository/build-tools_r34.0.0-linux.zip"
            "https://dl.google.com/android/repository/build-tools_r33.0.2-linux.zip"
            "https://dl.google.com/android/repository/build-tools_r30.0.3-linux.zip"
          )
          
          BUILD_TOOLS_DOWNLOADED=false
          for url in "${BUILD_TOOLS_URLS[@]}"; do
            echo "Trying to download from: $url"
            if curl -sSL "$url" -o build-tools.zip; then
              # Проверяем, что файл скачался и не пустой
              if [ -f "build-tools.zip" ] && [ -s "build-tools.zip" ]; then
                echo "File downloaded, size: $(stat -c%s build-tools.zip) bytes"
                
                # Проверяем, что это валидный zip файл
                if unzip -t build-tools.zip >/dev/null 2>&1; then
                  echo "Valid zip file, extracting..."
                  unzip -q build-tools.zip
                  
                  # Определяем версию и переименовываем папку
                  if [ -d "android-11" ]; then
                    mv android-11 34.0.0
                    echo "✅ build-tools 34.0.0 downloaded and extracted"
                  elif [ -d "android-10" ]; then
                    mv android-10 33.0.2
                    echo "✅ build-tools 33.0.2 downloaded and extracted"
                  elif [ -d "android-9" ]; then
                    mv android-9 30.0.3
                    echo "✅ build-tools 30.0.3 downloaded and extracted"
                  else
                    # Ищем любую папку android-*
                    ANDROID_DIR=$(find . -maxdepth 1 -type d -name "android-*" | head -1)
                    if [ -n "$ANDROID_DIR" ]; then
                      # Определяем правильную версию по URL
                      if [[ "$url" == *"34.0.0"* ]]; then
                        mv "$ANDROID_DIR" "34.0.0"
                        echo "✅ build-tools 34.0.0 downloaded and extracted"
                      elif [[ "$url" == *"33.0.2"* ]]; then
                        mv "$ANDROID_DIR" "33.0.2"
                        echo "✅ build-tools 33.0.2 downloaded and extracted"
                      elif [[ "$url" == *"30.0.3"* ]]; then
                        mv "$ANDROID_DIR" "30.0.3"
                        echo "✅ build-tools 30.0.3 downloaded and extracted"
                      else
                        VERSION=$(basename "$ANDROID_DIR" | sed 's/android-//')
                        mv "$ANDROID_DIR" "$VERSION"
                        echo "✅ build-tools $VERSION downloaded and extracted"
                      fi
                    fi
                  fi
                  
                  rm -f build-tools.zip
                  BUILD_TOOLS_DOWNLOADED=true
                  break
                else
                  echo "Invalid zip file, trying next URL..."
                  rm -f build-tools.zip
                fi
              else
                echo "File download failed or empty, trying next URL..."
                rm -f build-tools.zip
              fi
            else
              echo "Failed to download from $url, trying next URL..."
            fi
          done
          
          if [ "$BUILD_TOOLS_DOWNLOADED" = false ]; then
            echo "❌ Failed to download any build-tools version"
            exit 1
          fi
          
          cd ..
          
          # Скачиваем platform-tools
          echo "Downloading platform-tools..."
          cd platform-tools
          
          PLATFORM_TOOLS_URLS=(
            "https://dl.google.com/android/repository/platform-tools_r34.0.5-linux.zip"
            "https://dl.google.com/android/repository/platform-tools_r33.0.3-linux.zip"
            "https://dl.google.com/android/repository/platform-tools_r30.0.5-linux.zip"
          )
          
          PLATFORM_TOOLS_DOWNLOADED=false
          for url in "${PLATFORM_TOOLS_URLS[@]}"; do
            echo "Trying to download platform-tools from: $url"
            if curl -sSL "$url" -o platform-tools.zip; then
              if [ -f "platform-tools.zip" ] && [ -s "platform-tools.zip" ]; then
                echo "Platform-tools downloaded, size: $(stat -c%s platform-tools.zip) bytes"
                if unzip -t platform-tools.zip >/dev/null 2>&1; then
                  unzip -q platform-tools.zip
                  rm -f platform-tools.zip
                  echo "✅ platform-tools downloaded and extracted"
                  PLATFORM_TOOLS_DOWNLOADED=true
                  break
                else
                  echo "Invalid platform-tools zip file, trying next URL..."
                  rm -f platform-tools.zip
                fi
              else
                echo "Platform-tools download failed or empty, trying next URL..."
                rm -f platform-tools.zip
              fi
            else
              echo "Failed to download platform-tools from $url, trying next URL..."
            fi
          done
          
          if [ "$PLATFORM_TOOLS_DOWNLOADED" = false ]; then
            echo "❌ Failed to download platform-tools"
            exit 1
          fi
          
          cd ..
          
          # Скачиваем platform android-33
          echo "Downloading platform android-33..."
          cd platforms
          
          PLATFORM_URLS=(
            "https://dl.google.com/android/repository/platform-33_r03.zip"
            "https://dl.google.com/android/repository/platform-32_r01.zip"
            "https://dl.google.com/android/repository/platform-31_r01.zip"
          )
          
          PLATFORM_DOWNLOADED=false
          for url in "${PLATFORM_URLS[@]}"; do
            echo "Trying to download platform from: $url"
            if curl -sSL "$url" -o platform.zip; then
              if [ -f "platform.zip" ] && [ -s "platform.zip" ]; then
                echo "Platform downloaded, size: $(stat -c%s platform.zip) bytes"
                if unzip -t platform.zip >/dev/null 2>&1; then
                  unzip -q platform.zip
                  rm -f platform.zip
                  echo "✅ platform downloaded and extracted"
                  PLATFORM_DOWNLOADED=true
                  break
                else
                  echo "Invalid platform zip file, trying next URL..."
                  rm -f platform.zip
                fi
              else
                echo "Platform download failed or empty, trying next URL..."
                rm -f platform.zip
              fi
            else
              echo "Failed to download platform from $url, trying next URL..."
            fi
          done
          
          if [ "$PLATFORM_DOWNLOADED" = false ]; then
            echo "❌ Failed to download platform"
            exit 1
          fi
          
          cd ..
          
                    # Проверяем установку
          echo "== Verifying installation =="
          ls -la build-tools/ || true
          ls -la platforms/ || true
          ls -la platform-tools/ || true
          
          # Создаем папку logs если её нет
          mkdir -p logs
          
          # Проверяем sdkmanager
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --version | tee -a logs/system_info.txt || true
          java -version 2>&1 | tee -a logs/system_info.txt || true

          # Принимаем лицензии Android SDK
          echo "== Accepting Android SDK licenses ==" | tee -a logs/system_info.txt
          yes | "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --licenses | tee -a logs/system_info.txt || true
          
          # Устанавливаем все необходимые компоненты через sdkmanager
          echo "== Installing Android SDK components ==" | tee -a logs/system_info.txt
          "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" --sdk_root="$ANDROID_HOME" \
            "platform-tools" "platforms;android-32" "build-tools;34.0.0" "ndk;25.2.9519653" | tee -a logs/system_info.txt || true

      - name: Install NDK (if needed)
        run: |
          set -euo pipefail
          mkdir -p logs
          
          echo "== Installing NDK =="
          cd "$ANDROID_HOME/ndk"
          
          # Пробуем несколько URL для NDK
          NDK_URLS=(
            "https://dl.google.com/android/repository/android-ndk-$ANDROID_NDK_VERSION-linux.zip"
            "https://dl.google.com/android/repository/android-ndk-r25c-linux.zip"
            "https://dl.google.com/android/repository/android-ndk-r25b-linux.zip"
            "https://dl.google.com/android/repository/android-ndk-r25a-linux.zip"
          )
          
          NDK_DOWNLOADED=false
          for url in "${NDK_URLS[@]}"; do
            echo "Trying to download NDK from: $url"
            if curl -sSL "$url" -o ndk.zip; then
              # Проверяем, что файл скачался и не пустой
              if [ -f "ndk.zip" ] && [ -s "ndk.zip" ]; then
                echo "NDK downloaded, size: $(stat -c%s ndk.zip) bytes"
                
                # Проверяем, что это валидный zip файл
                if unzip -t ndk.zip >/dev/null 2>&1; then
                  echo "Valid NDK zip file, extracting..."
                  unzip -q ndk.zip
                  
                  # Определяем версию и переименовываем папку
                  if [ -d "android-ndk-$ANDROID_NDK_VERSION" ]; then
                    mv "android-ndk-$ANDROID_NDK_VERSION" "$ANDROID_NDK_VERSION"
                    echo "✅ NDK $ANDROID_NDK_VERSION downloaded and extracted"
                  elif [ -d "android-ndk-r25c" ]; then
                    mv "android-ndk-r25c" "25.2.9519653"
                    echo "✅ NDK r25c downloaded and extracted as 25.2.9519653"
                  elif [ -d "android-ndk-r25b" ]; then
                    mv "android-ndk-r25b" "25.2.9519653"
                    echo "✅ NDK r25b downloaded and extracted as 25.2.9519653"
                  elif [ -d "android-ndk-r25a" ]; then
                    mv "android-ndk-r25a" "25.2.9519653"
                    echo "✅ NDK r25a downloaded and extracted as 25.2.9519653"
                  else
                    # Ищем любую папку android-ndk-*
                    NDK_DIR=$(find . -maxdepth 1 -type d -name "android-ndk-*" | head -1)
                    if [ -n "$NDK_DIR" ]; then
                      mv "$NDK_DIR" "$ANDROID_NDK_VERSION"
                      echo "✅ NDK downloaded and extracted as $ANDROID_NDK_VERSION"
                    fi
                  fi
                  
                  rm -f ndk.zip
                  NDK_DOWNLOADED=true
                  break
                else
                  echo "Invalid NDK zip file, trying next URL..."
                  rm -f ndk.zip
                fi
              else
                echo "NDK download failed or empty, trying next URL..."
                rm -f ndk.zip
              fi
            else
              echo "Failed to download NDK from $url, trying next URL..."
            fi
          done
          
          if [ "$NDK_DOWNLOADED" = false ]; then
            echo "❌ Failed to download any NDK version"
            exit 1
          fi
          
          # Создаем символическую ссылку на NDK
          ln -s "$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION" "$ANDROID_NDK_HOME" || true
          
          echo "== Final verification =="
          ls -la "$ANDROID_HOME/build-tools/" || true
          ls -la "$ANDROID_HOME/platforms/" || true
          ls -la "$ANDROID_HOME/ndk/" || true
          ls -la "$ANDROID_HOME/platform-tools/" || true
          
          echo "== Check aidl availability =="
          AIDL_PATHS=$(find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null || echo "")
          if [ -n "$AIDL_PATHS" ]; then
            echo "✅ aidl found at:"
            echo "$AIDL_PATHS"
            # Проверяем, что aidl исполняемый
            for aidl_path in $AIDL_PATHS; do
              if [ -x "$aidl_path" ]; then
                echo "✅ $aidl_path is executable"
                "$aidl_path" --help | head -5 || true
              else
                echo "⚠️  $aidl_path is not executable"
              fi
            done
          else
            echo "❌ aidl not found in Android SDK"
            echo "Available files in build-tools:"
            find "$ANDROID_HOME/build-tools" -name "*aidl*" 2>/dev/null || echo "No aidl-related files found"
          fi
          
          echo "== Disk usage =="
          du -sh "$ANDROID_HOME" || true
          df -h || true

      - name: Install buildozer & Python deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip wheel setuptools cython
          python -m pip install buildozer==1.5.0
          python -m pip install appdirs
          python -m pip install python-for-android
          
          # Проверяем версии установленных пакетов
          echo "=== Installed Python packages ===" | tee -a logs/system_info.txt
          pip list | grep -E "(buildozer|kivy|pillow|reportlab)" | tee -a logs/system_info.txt

      - name: Verify Android SDK installation
        run: |
          set -euo pipefail
          echo "=== Android SDK Verification ===" | tee -a logs/summary.txt
          
          # Проверяем наличие build-tools
          if [ -d "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS" ]; then
            echo "✅ build-tools $ANDROID_BUILD_TOOLS found" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS/" | tee -a logs/summary.txt
          else
            echo "❌ build-tools $ANDROID_BUILD_TOOLS not found" | tee -a logs/summary.txt
            echo "Available build-tools:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/build-tools/" 2>/dev/null | tee -a logs/summary.txt || echo "No build-tools directory" | tee -a logs/summary.txt
            
            # Попробуем найти любую доступную версию build-tools
            AVAILABLE_BUILD_TOOLS=$(ls "$ANDROID_HOME/build-tools/" 2>/dev/null | head -1 || echo "")
            if [ -n "$AVAILABLE_BUILD_TOOLS" ]; then
              echo "⚠️  Using available build-tools: $AVAILABLE_BUILD_TOOLS" | tee -a logs/summary.txt
              export ANDROID_BUILD_TOOLS="$AVAILABLE_BUILD_TOOLS"
            else
              echo "❌ No build-tools available at all" | tee -a logs/summary.txt
              exit 1
            fi
          fi
          
          # Проверяем наличие aidl
          AIDL_PATH=$(find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null | head -1)
          if [ -n "$AIDL_PATH" ]; then
            echo "✅ aidl found at: $AIDL_PATH" | tee -a logs/summary.txt
            "$AIDL_PATH" --version 2>&1 | tee -a logs/summary.txt || true
          else
            echo "❌ aidl not found" | tee -a logs/summary.txt
            echo "Searching for aidl in all build-tools..." | tee -a logs/summary.txt
            find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null | tee -a logs/summary.txt || echo "No aidl found anywhere" | tee -a logs/summary.txt
            exit 1
          fi
          
          # Проверяем наличие platforms
          if [ -d "$ANDROID_HOME/platforms/$ANDROID_PLATFORM" ]; then
            echo "✅ platform $ANDROID_PLATFORM found" | tee -a logs/summary.txt
          else
            echo "❌ platform $ANDROID_PLATFORM not found" | tee -a logs/summary.txt
            echo "Available platforms:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/platforms/" 2>/dev/null | tee -a logs/summary.txt || echo "No platforms directory" | tee -a logs/summary.txt
            
            # Попробуем найти любую доступную версию platform
            AVAILABLE_PLATFORM=$(ls "$ANDROID_HOME/platforms/" 2>/dev/null | head -1 || echo "")
            if [ -n "$AVAILABLE_PLATFORM" ]; then
              echo "⚠️  Using available platform: $AVAILABLE_PLATFORM" | tee -a logs/summary.txt
              export ANDROID_PLATFORM="$AVAILABLE_PLATFORM"
              echo "Updated ANDROID_PLATFORM to: $ANDROID_PLATFORM" | tee -a logs/summary.txt
            else
              echo "❌ No platforms available at all" | tee -a logs/summary.txt
              exit 1
            fi
          fi
          
          # Проверяем наличие NDK
          if [ -d "$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION" ]; then
            echo "✅ NDK $ANDROID_NDK_VERSION found" | tee -a logs/summary.txt
          else
            echo "❌ NDK $ANDROID_NDK_VERSION not found" | tee -a logs/summary.txt
            echo "Available NDK versions:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/ndk/" 2>/dev/null | tee -a logs/summary.txt || echo "No ndk directory" | tee -a logs/summary.txt
            exit 1
          fi

      - name: Download DejaVuSans.ttf (for Cyrillic PDF)
        run: |
          set -euxo pipefail
          mkdir -p app/assets/fonts logs
          curl -sSL "https://raw.githubusercontent.com/dejavu-fonts/dejavu-fonts/master/ttf/DejaVuSans.ttf" -o app/assets/fonts/DejaVuSans.ttf
          ls -lh app/assets/fonts | tee -a logs/system_info.txt

      - name: Validate buildozer.spec
        run: |
          set -euo pipefail
          test -f buildozer.spec || { echo "buildozer.spec not found"; exit 1; }
          
          echo "=== buildozer.spec validation ===" | tee -a logs/summary.txt
          head -n 10 buildozer.spec | tee -a logs/summary.txt
          
          # Проверяем соответствие версий в buildozer.spec
          python -c "
          import configparser, sys
          cfg = configparser.ConfigParser()
          cfg.read('buildozer.spec', encoding='utf-8')
          
          # Проверяем наличие секций
          assert 'app' in cfg, 'Missing [app] section in buildozer.spec'
          assert 'android' in cfg, 'Missing [android] section in buildozer.spec'
          
          # Проверяем версии Android SDK
          android_api = cfg.get('app', 'android.api', fallback='')
          android_minapi = cfg.get('app', 'android.minapi', fallback='')
          android_platform = cfg.get('android', 'android.platform', fallback='')
          build_tools = cfg.get('android', 'android.build_tools', fallback='')
          ndk_version = cfg.get('android', 'android.ndk', fallback='')
          
          print(f'Android API: {android_api}')
          print(f'Android Min API: {android_minapi}')
          print(f'Android Platform: {android_platform}')
          print(f'Build Tools: {build_tools}')
          print(f'NDK Version: {ndk_version}')
          
          # Проверяем соответствие стабильным версиям
          assert android_api == '32', f'Expected android.api=32, got {android_api}'
          assert android_minapi == '26', f'Expected android.minapi=26, got {android_minapi}'
          assert android_platform == 'android-32', f'Expected android.platform=android-32, got {android_platform}'
          assert build_tools == '34.0.0', f'Expected android.build_tools=34.0.0, got {build_tools}'
          assert ndk_version == '25.2.9519653', f'Expected android.ndk=25.2.9519653, got {ndk_version}'
          
          print('buildozer.spec validation: PASSED')
          " | tee -a logs/summary.txt

      - name: Build APK (verbose, logged)
        env:
          ANDROID_HOME: ${{ env.ANDROID_HOME }}
          ANDROID_NDK_HOME: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}
          ANDROIDSDK: ${{ env.ANDROID_HOME }}
          ANDROIDNDK: ${{ env.ANDROID_NDK_HOME }}
          ANDROID_PLATFORM: ${{ env.ANDROID_PLATFORM }}
          ANDROID_BUILD_TOOLS: ${{ env.ANDROID_BUILD_TOOLS }}
          ANDROID_NDK_VERSION: ${{ env.ANDROID_NDK_VERSION }}
          ANDROIDAPI: ${{ env.ANDROIDAPI }}
          ANDROIDMINAPI: ${{ env.ANDROIDMINAPI }}
          LIBFFI_CFLAGS: ${{ env.LIBFFI_CFLAGS }}
          LIBFFI_LIBS: ${{ env.LIBFFI_LIBS }}
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dkotlin.daemon.jvm.options=-Xmx512m -Dorg.gradle.caching=false -Dorg.gradle.daemon=false"
          GRADLE_USER_HOME: "/tmp/gradle-cache"
          GRADLE_DAEMON_OPTS: "-Dorg.gradle.daemon=false"
          AUTOCONF_VERSION: ${{ env.AUTOCONF_VERSION }}
          AUTOMAKE_VERSION: ${{ env.AUTOMAKE_VERSION }}
          LT_SYS_SYMBOL_USCORE: ${{ env.LT_SYS_SYMBOL_USCORE }}
          P4A_USE_SYSTEM_LIBFFI: ${{ env.P4A_USE_SYSTEM_LIBFFI }}
          P4A_LIBFFI_SKIP: ${{ env.P4A_LIBFFI_SKIP }}
          P4A_RECIPE_BLACKLIST: ${{ env.P4A_RECIPE_BLACKLIST }}
          P4A_BOOTSTRAP: ${{ env.P4A_BOOTSTRAP }}
          P4A_BRANCH: ${{ env.P4A_BRANCH }}
        run: |
          set -euo pipefail
          mkdir -p logs
          
          # Определяем тип сборки
          BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
          echo "Building $BUILD_TYPE APK..." | tee -a logs/summary.txt
          
          # Проверяем окружение перед сборкой
          echo "== Pre-build environment check ==" | tee -a logs/buildozer_build.log
          echo "ANDROID_HOME: $ANDROID_HOME" | tee -a logs/buildozer_build.log
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME" | tee -a logs/buildozer_build.log
          echo "Current directory: $(pwd)" | tee -a logs/buildozer_build.log
          echo "Python version: $(python --version)" | tee -a logs/buildozer_build.log
          echo "Buildozer version: $(buildozer --version)" | tee -a logs/buildozer_build.log
          
          # Проверяем наличие buildozer.spec
          if [ ! -f "buildozer.spec" ]; then
            echo "ERROR: buildozer.spec not found!" | tee -a logs/buildozer_build.log
            exit 1
          fi
          
          # Очищаем предыдущие сборки и создаем папку bin
          rm -rf bin .buildozer
          mkdir -p bin
          
          # Обновляем buildozer.spec с актуальными версиями и путями
          echo "== Updating buildozer.spec with actual versions and paths ==" | tee -a logs/buildozer_build.log
          echo "ANDROID_HOME: $ANDROID_HOME" | tee -a logs/buildozer_build.log
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME" | tee -a logs/buildozer_build.log
          echo "ANDROID_PLATFORM: $ANDROID_PLATFORM" | tee -a logs/buildozer_build.log
          echo "ANDROID_BUILD_TOOLS: $ANDROID_BUILD_TOOLS" | tee -a logs/buildozer_build.log
          echo "ANDROID_NDK_VERSION: $ANDROID_NDK_VERSION" | tee -a logs/buildozer_build.log
          
          # Обновляем buildozer.spec с актуальными версиями и путями
          if [ -f "buildozer.spec" ]; then
            # Создаем резервную копию
            cp buildozer.spec buildozer.spec.backup
            
            # Обновляем пути и версии в buildozer.spec
            sed -i "s|android\.sdk_dir = .*|android.sdk_dir = $ANDROID_HOME|" buildozer.spec
            sed -i "s|android\.ndk_dir = .*|android.ndk_dir = $ANDROID_NDK_HOME|" buildozer.spec
            sed -i "s/android\.platform = .*/android.platform = $ANDROID_PLATFORM/" buildozer.spec
            sed -i "s/android\.build_tools = .*/android.build_tools = $ANDROID_BUILD_TOOLS/" buildozer.spec
            sed -i "s/android\.ndk = .*/android.ndk = $ANDROID_NDK_VERSION/" buildozer.spec
            sed -i "s/android\.api = .*/android.api = $ANDROIDAPI/" buildozer.spec
            sed -i "s/android\.minapi = .*/android.minapi = $ANDROIDMINAPI/" buildozer.spec
            
            echo "Updated buildozer.spec with actual versions and paths" | tee -a logs/buildozer_build.log
            echo "Updated android.sdk_dir to: $ANDROID_HOME" | tee -a logs/buildozer_build.log
            echo "Updated android.ndk_dir to: $ANDROID_NDK_HOME" | tee -a logs/buildozer_build.log
            echo "Updated android.platform to: $ANDROID_PLATFORM" | tee -a logs/buildozer_build.log
            echo "Updated android.build_tools to: $ANDROID_BUILD_TOOLS" | tee -a logs/buildozer_build.log
            echo "Updated android.ndk to: $ANDROID_NDK_VERSION" | tee -a logs/buildozer_build.log
            echo "Updated android.api to: $ANDROIDAPI" | tee -a logs/buildozer_build.log
            echo "Updated android.minapi to: $ANDROIDMINAPI" | tee -a logs/buildozer_build.log
          fi
          
          # Создаем символические ссылки для buildozer
          echo "== Creating symlinks for buildozer ==" | tee -a logs/buildozer_build.log
          BUILDIZER_SDK_DIR="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$BUILDIZER_SDK_DIR"
          
          # Создаем символические ссылки на наши установленные компоненты
          ln -sf "$ANDROID_HOME/build-tools" "$BUILDIZER_SDK_DIR/build-tools" || true
          ln -sf "$ANDROID_HOME/platforms" "$BUILDIZER_SDK_DIR/platforms" || true
          ln -sf "$ANDROID_HOME/platform-tools" "$BUILDIZER_SDK_DIR/platform-tools" || true
          ln -sf "$ANDROID_HOME/ndk" "$BUILDIZER_SDK_DIR/ndk" || true
          ln -sf "$ANDROID_HOME/cmdline-tools" "$BUILDIZER_SDK_DIR/cmdline-tools" || true
          
          # Проверяем, что ссылки созданы правильно
          echo "== Verifying symlinks ==" | tee -a logs/buildozer_build.log
          ls -la "$BUILDIZER_SDK_DIR/" | tee -a logs/buildozer_build.log
          echo "Checking build-tools:" | tee -a logs/buildozer_build.log
          ls -la "$BUILDIZER_SDK_DIR/build-tools/" | tee -a logs/buildozer_build.log || echo "build-tools not found" | tee -a logs/buildozer_build.log
          echo "Checking platforms:" | tee -a logs/buildozer_build.log
          ls -la "$BUILDIZER_SDK_DIR/platforms/" | tee -a logs/buildozer_build.log || echo "platforms not found" | tee -a logs/buildozer_build.log
          
          # Создаем старую структуру tools для совместимости с buildozer
          mkdir -p "$BUILDIZER_SDK_DIR/tools/bin"
          ln -sf "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" "$BUILDIZER_SDK_DIR/tools/bin/sdkmanager" || true
          ln -sf "$ANDROID_HOME/cmdline-tools/latest/bin/avdmanager" "$BUILDIZER_SDK_DIR/tools/bin/avdmanager" || true
          ln -sf "$ANDROID_HOME/cmdline-tools/latest/bin/apkanalyzer" "$BUILDIZER_SDK_DIR/tools/bin/apkanalyzer" || true
          
          echo "Created symlinks in $BUILDIZER_SDK_DIR" | tee -a logs/buildozer_build.log
          ls -la "$BUILDIZER_SDK_DIR" | tee -a logs/buildozer_build.log
          
          # Проверяем доступность sdkmanager
          echo "== Checking sdkmanager availability ==" | tee -a logs/buildozer_build.log
          if [ -f "$BUILDIZER_SDK_DIR/tools/bin/sdkmanager" ]; then
            echo "✅ sdkmanager found at: $BUILDIZER_SDK_DIR/tools/bin/sdkmanager" | tee -a logs/buildozer_build.log
            "$BUILDIZER_SDK_DIR/tools/bin/sdkmanager" --version | tee -a logs/buildozer_build.log || true
          else
            echo "❌ sdkmanager not found at expected location" | tee -a logs/buildozer_build.log
          fi
          
          # Проверяем aidl
          echo "== Checking aidl availability ==" | tee -a logs/buildozer_build.log
          AIDL_PATH=$(find "$BUILDIZER_SDK_DIR" -name "aidl" -type f 2>/dev/null | head -1 || echo "")
          if [ -n "$AIDL_PATH" ]; then
            echo "✅ aidl found at: $AIDL_PATH" | tee -a logs/buildozer_build.log
          else
            echo "❌ aidl not found in buildozer SDK directory" | tee -a logs/buildozer_build.log
          fi
          
          # Попытка обхода проблем с libffi
          echo "== Attempting libffi workaround ==" | tee -a logs/buildozer_build.log
          export LT_SYS_SYMBOL_USCORE=no
          export AUTOCONF_VERSION=2.71
          export AUTOMAKE_VERSION=1.16
          export P4A_USE_SYSTEM_LIBFFI=1
          export P4A_LIBFFI_SKIP=1
          export P4A_RECIPE_BLACKLIST=libffi
          export P4A_BOOTSTRAP=sdl2
          export P4A_BRANCH=master
          
          # Дополнительные переменные для полного исключения libffi
          export LIBFFI_CFLAGS="-I/usr/include/arm-linux-gnueabihf"
          export LIBFFI_LIBS="-lffi"
          
          # Проверяем buildozer перед сборкой
          echo "== Checking buildozer installation ==" | tee -a logs/buildozer_build.log
          buildozer --version | tee -a logs/buildozer_build.log || echo "buildozer --version failed" | tee -a logs/buildozer_build.log
          which buildozer | tee -a logs/buildozer_build.log
          
          # Проверяем, что buildozer может найти SDK компоненты
          echo "== Checking SDK components availability ==" | tee -a logs/buildozer_build.log
          echo "ANDROID_HOME: $ANDROID_HOME" | tee -a logs/buildozer_build.log
          echo "ANDROID_NDK_HOME: $ANDROID_NDK_HOME" | tee -a logs/buildozer_build.log
          echo "Checking if buildozer can find SDK:" | tee -a logs/buildozer_build.log
          buildozer android debug --help 2>&1 | head -20 | tee -a logs/buildozer_build.log || echo "buildozer android debug --help failed" | tee -a logs/buildozer_build.log
          
          # Проверяем, что buildozer может найти все необходимые компоненты
          echo "== Checking buildozer SDK detection ==" | tee -a logs/buildozer_build.log
          echo "Checking buildozer android status:" | tee -a logs/buildozer_build.log
          buildozer android status 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer android status failed" | tee -a logs/buildozer_build.log
          
          # Проверяем наличие исходных файлов приложения
          echo "== Checking application files ==" | tee -a logs/buildozer_build.log
          ls -la app/ | tee -a logs/buildozer_build.log
          echo "Main Python files:" | tee -a logs/buildozer_build.log
          ls -la app/*.py | tee -a logs/buildozer_build.log
          echo "Buildozer spec file:" | tee -a logs/buildozer_build.log
          ls -la buildozer.spec | tee -a logs/buildozer_build.log
          
          # Принудительная очистка buildozer перед сборкой
          echo "== Forcing buildozer clean ==" | tee -a logs/buildozer_build.log
          buildozer android clean 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer clean failed (expected - may need dependencies)" | tee -a logs/buildozer_build.log
          
          # Удаляем кеш buildozer для принудительного пересоздания
          echo "== Removing buildozer cache ==" | tee -a logs/buildozer_build.log
          rm -rf .buildozer || true
          
          # Сборка с детальным логированием
          echo "== Starting buildozer build ==" | tee -a logs/buildozer_build.log
          echo "Build type: $BUILD_TYPE" | tee -a logs/buildozer_build.log
          echo "Using command: buildozer -v android $BUILD_TYPE" | tee -a logs/buildozer_build.log
          
          # Попробуем инициализацию buildozer сначала
          echo "== Initializing buildozer ==" | tee -a logs/buildozer_build.log
          buildozer init 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer init failed (may already exist)" | tee -a logs/buildozer_build.log
          
          # Проверяем, что buildozer создал необходимые файлы
          echo "== Checking buildozer initialization ==" | tee -a logs/buildozer_build.log
          ls -la .buildozer/ 2>&1 | tee -a logs/buildozer_build.log || echo ".buildozer directory not found" | tee -a logs/buildozer_build.log
          
          # Проверяем содержимое .buildozer директории
          echo "== Checking .buildozer contents ==" | tee -a logs/buildozer_build.log
          find .buildozer -type f -name "*.py" -o -name "*.json" -o -name "*.txt" 2>/dev/null | head -20 | tee -a logs/buildozer_build.log || echo "No buildozer files found" | tee -a logs/buildozer_build.log
          
          # Проверяем, что buildozer может найти все необходимые компоненты после инициализации
          echo "== Re-checking buildozer SDK detection after init ==" | tee -a logs/buildozer_build.log
          buildozer android debug --help 2>&1 | head -10 | tee -a logs/buildozer_build.log || echo "buildozer android debug --help failed after init" | tee -a logs/buildozer_build.log
          
          # Попробуем принудительно создать Android проект
          echo "== Forcing Android project creation ==" | tee -a logs/buildozer_build.log
          buildozer android update 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer android update failed" | tee -a logs/buildozer_build.log
          
          # Проверяем, что Android проект создан
          echo "== Checking Android project creation ==" | tee -a logs/buildozer_build.log
          ls -la .buildozer/android/ 2>&1 | tee -a logs/buildozer_build.log || echo ".buildozer/android directory not found" | tee -a logs/buildozer_build.log
          
          # Проверяем содержимое Android проекта
          echo "== Checking Android project contents ==" | tee -a logs/buildozer_build.log
          find .buildozer/android -name "*.gradle*" -o -name "gradle-wrapper.properties" -o -name "AndroidManifest.xml" 2>/dev/null | tee -a logs/buildozer_build.log || echo "No Android project files found" | tee -a logs/buildozer_build.log
          
          # Проверяем, что buildozer может найти все необходимые компоненты после создания Android проекта
          echo "== Final buildozer SDK detection check ==" | tee -a logs/buildozer_build.log
          buildozer android debug --help 2>&1 | head -10 | tee -a logs/buildozer_build.log || echo "buildozer android debug --help failed after project creation" | tee -a logs/buildozer_build.log
          
          # Попробуем сначала простую команду
          echo "== Attempting buildozer build ==" | tee -a logs/buildozer_build.log
          echo "Current working directory: $(pwd)" | tee -a logs/buildozer_build.log
          echo "Files in current directory:" | tee -a logs/buildozer_build.log
          ls -la | tee -a logs/buildozer_build.log
          
          # Попробуем принудительно создать Android проект
          echo "== Forcing Android project creation ==" | tee -a logs/buildozer_build.log
          buildozer android update 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer android update failed" | tee -a logs/buildozer_build.log
          
          # Проверяем, что Android проект создан
          echo "== Checking Android project creation ==" | tee -a logs/buildozer_build.log
          ls -la .buildozer/android/ 2>&1 | tee -a logs/buildozer_build.log || echo ".buildozer/android directory not found" | tee -a logs/buildozer_build.log
          
          # Проверяем содержимое Android проекта
          echo "== Checking Android project contents ==" | tee -a logs/buildozer_build.log
          find .buildozer/android -name "*.gradle*" -o -name "gradle-wrapper.properties" -o -name "AndroidManifest.xml" 2>/dev/null | tee -a logs/buildozer_build.log || echo "No Android project files found" | tee -a logs/buildozer_build.log
          
          # Проверяем, что buildozer может найти все необходимые компоненты после создания Android проекта
          echo "== Final buildozer SDK detection check ==" | tee -a logs/buildozer_build.log
          buildozer android debug --help 2>&1 | head -10 | tee -a logs/buildozer_build.log || echo "buildozer android debug --help failed after project creation" | tee -a logs/buildozer_build.log
          
          # Создаем символические ссылки на Gradle файлы для GitHub Actions
          echo "== Creating symlinks for Gradle files ==" | tee -a logs/buildozer_build.log
          if [ -d ".buildozer/android/platform/build-armeabi-v7a" ]; then
            find .buildozer/android -name "*.gradle*" -o -name "gradle-wrapper.properties" 2>/dev/null | head -5 | while read file; do
              filename=$(basename "$file")
              ln -sf "$file" "$filename" 2>/dev/null || true
              echo "Created symlink: $filename -> $file" | tee -a logs/buildozer_build.log
            done
          fi
          
          # Проверяем созданные символические ссылки
          echo "== Checking created symlinks ==" | tee -a logs/buildozer_build.log
          ls -la *.gradle* gradle-wrapper.properties 2>/dev/null | tee -a logs/buildozer_build.log || echo "No Gradle symlinks found" | tee -a logs/buildozer_build.log
          
          if buildozer android $BUILD_TYPE 2>&1 | tee -a logs/buildozer_build.log; then
            echo "Buildozer command completed successfully" | tee -a logs/summary.txt
          else
            BUILD_EXIT_CODE=$?
            echo "Simple buildozer command failed with exit code: $BUILD_EXIT_CODE" | tee -a logs/summary.txt
            echo "Trying with verbose flag..." | tee -a logs/summary.txt
            
            # Попробуем с verbose флагом
            if buildozer -v android $BUILD_TYPE 2>&1 | tee -a logs/buildozer_build.log; then
              echo "Buildozer command with verbose completed successfully" | tee -a logs/summary.txt
            else
              BUILD_EXIT_CODE=$?
              echo "Buildozer command with verbose also failed with exit code: $BUILD_EXIT_CODE" | tee -a logs/summary.txt
              echo "Last 50 lines of build log:" | tee -a logs/summary.txt
              tail -50 logs/buildozer_build.log | tee -a logs/summary.txt
              exit $BUILD_EXIT_CODE
            fi
          fi
          
          # После сборки создаем дополнительные символические ссылки
          echo "== Creating additional symlinks after build ==" | tee -a logs/buildozer_build.log
          find .buildozer/android -name "*.gradle*" -o -name "gradle-wrapper.properties" 2>/dev/null | while read file; do
            filename=$(basename "$file")
            if [ ! -e "$filename" ]; then
              ln -sf "$file" "$filename" 2>/dev/null || true
              echo "Created additional symlink: $filename -> $file" | tee -a logs/buildozer_build.log
            fi
          done
          
          # Проверяем все Gradle файлы в проекте
          echo "== Final check for Gradle files ==" | tee -a logs/buildozer_build.log
          find . -name "*.gradle*" -o -name "gradle-wrapper.properties" 2>/dev/null | tee -a logs/buildozer_build.log || echo "No Gradle files found anywhere" | tee -a logs/buildozer_build.log
          
          # Проверяем результат сборки
          echo "== Checking build results ==" | tee -a logs/summary.txt
          echo "Current working directory: $(pwd)" | tee -a logs/summary.txt
          echo "Directory contents:" | tee -a logs/summary.txt
          ls -la | tee -a logs/summary.txt
          
          if [ -d "bin" ] && [ "$(ls -A bin 2>/dev/null)" ]; then
            echo "APK build: SUCCESS - files found in bin/" | tee -a logs/summary.txt
            ls -la bin/ | tee -a logs/summary.txt
            
            # Проверяем конкретные файлы
            APK_FILES=$(find bin -name "*.apk" 2>/dev/null || true)
            AAB_FILES=$(find bin -name "*.aab" 2>/dev/null || true)
            
            if [ -n "$APK_FILES" ]; then
              echo "APK files found:" | tee -a logs/summary.txt
              echo "$APK_FILES" | tee -a logs/summary.txt
            fi
            
            if [ -n "$AAB_FILES" ]; then
              echo "AAB files found:" | tee -a logs/summary.txt
              echo "$AAB_FILES" | tee -a logs/summary.txt
            fi
          else
            echo "APK build: FAILED - no files found in bin/" | tee -a logs/summary.txt
            echo "Checking for any build artifacts..." | tee -a logs/summary.txt
            find . -name "*.apk" -o -name "*.aab" 2>/dev/null | tee -a logs/summary.txt || echo "No APK/AAB files found anywhere" | tee -a logs/summary.txt
            echo "Checking .buildozer directory..." | tee -a logs/summary.txt
            ls -la .buildozer/ 2>/dev/null | tee -a logs/summary.txt || echo ".buildozer directory not found" | tee -a logs/summary.txt
            
            # Дополнительная диагностика
            echo "== Additional diagnostics ==" | tee -a logs/summary.txt
            echo "Checking .buildozer/android directory:" | tee -a logs/summary.txt
            ls -la .buildozer/android/ 2>&1 | tee -a logs/summary.txt || echo ".buildozer/android directory not found" | tee -a logs/summary.txt
            echo "Checking for gradle files:" | tee -a logs/summary.txt
            find . -name "*.gradle*" -o -name "gradle-wrapper.properties" 2>/dev/null | tee -a logs/summary.txt || echo "No gradle files found" | tee -a logs/summary.txt
            echo "Checking for Android project structure:" | tee -a logs/summary.txt
            find . -name "AndroidManifest.xml" -o -name "build.gradle" 2>/dev/null | tee -a logs/summary.txt || echo "No Android project files found" | tee -a logs/summary.txt
            
            # Проверяем, что buildozer действительно запустился
            echo "Checking if buildozer process completed:" | tee -a logs/summary.txt
            if grep -q "Buildozer command completed successfully" logs/buildozer_build.log; then
              echo "Buildozer reported success but no APK found" | tee -a logs/summary.txt
            else
              echo "Buildozer did not report success" | tee -a logs/summary.txt
            fi
            
            echo "Last 100 lines of build log for debugging:" | tee -a logs/summary.txt
            tail -100 logs/buildozer_build.log | tee -a logs/summary.txt
            echo "bin directory contents:" | tee -a logs/summary.txt
            ls -la bin/ 2>/dev/null | tee -a logs/summary.txt || echo "bin directory does not exist" | tee -a logs/summary.txt
            exit 1
          fi

      - name: List build outputs
        run: |
          mkdir -p logs
          echo "=== Build Outputs ===" | tee -a logs/summary.txt
          ls -la bin | tee -a logs/summary.txt || true
          
          # Проверяем размер APK файлов
          if [ -d "bin" ]; then
            echo "=== APK File Sizes ===" | tee -a logs/summary.txt
            find bin -name "*.apk" -exec ls -lh {} \; | tee -a logs/summary.txt
          fi
          
          echo "Build finished at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" | tee -a logs/summary.txt

      - name: Job summary (quick view)
        if: always()
        run: |
          {
            echo "## CNC Checklist v1.3 – CI Build Summary"
            echo ""
            echo "**Build Type**: ${{ github.event.inputs.build_type || 'debug' }}"
            echo "**System**: Java $(java -version 2>&1 | head -n1), Python $(python --version 2>&1)"
            echo "**Android SDK**: Platform $ANDROID_PLATFORM, Build Tools $ANDROID_BUILD_TOOLS, NDK $ANDROID_NDK_VERSION"
            echo "**SDK root**: $ANDROID_HOME"
            echo ""
            echo "**Build Outputs**:"
            if [ -d "bin" ]; then
              ls -la bin || echo "bin/ directory exists but is empty"
            else
              echo "No bin/ directory found"
            fi
            echo ""
            echo "**Build Status**: ${{ job.status }}"
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload APK/AAB artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cnc-checklist-v1.3-${{ github.event.inputs.build_type || 'debug' }}-apk
          path: |
            bin/*.apk
            bin/*.aab
            .buildozer/android/platform/build-*/dist/*.apk
            .buildozer/android/platform/build-*/dist/*.aab
          if-no-files-found: warn
          retention-days: 30

      - name: Upload CI logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cnc-checklist-v1.3-ci-logs
          path: |
            logs/**
            .buildozer/**/*.log
            .buildozer/**/build*.txt
            .buildozer/android/platform/python-for-android/*.log
          if-no-files-found: warn
          retention-days: 7

