name: Build Android APK (CNC Checklist v1.3)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'debug'
        type: choice
        options:
        - debug
        - release

jobs:
  build-apk:
    runs-on: ubuntu-latest

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      ANDROIDAPI: "32"
      ANDROIDMINAPI: "26"
      BUILDIZER_LOG_LEVEL: "2"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Prepare logs dir
        run: |
          mkdir -p logs
          echo "=== CNC Checklist Build Workflow ===" | tee -a logs/summary.txt
          echo "Workflow started at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" | tee -a logs/summary.txt
          echo "Build type: ${{ github.event.inputs.build_type || 'debug' }}" | tee -a logs/summary.txt

      - name: Set up Java 11 (Temurin)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Verify Java 11 setup
        run: |
          echo "JAVA_HOME=$JAVA_HOME"
          which javac
          java -version
          javac -version

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install autotools (p4a/libffi build deps)
        run: |
          set -euxo pipefail
          sudo apt-get update
          # Фиксируем состав автотулов
          sudo apt-get install -y autoconf automake libtool libtool-bin m4 pkg-config gperf autopoint
          # Проверяем версии ключевых инструментов
          autoconf --version
          automake --version
          libtool --version || true
          libtool-bin --version || true

      - name: Install system deps (Ubuntu 24.04)
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y \
            git zip unzip \
            libstdc++6 libffi-dev libssl-dev zlib1g-dev \
             libncurses6 libtinfo6 \
             build-essential \
             python3-dev \
             python3-venv \
             libbz2-dev libreadline-dev libsqlite3-dev \
             libncurses5-dev libncursesw5-dev \
             xz-utils tk-dev libxml2-dev libxmlsec1-dev \
             liblzma-dev pkg-config autoconf automake \
             libtool cmake ninja-build ccache \
             wget curl file \
             libc6-dev libc6-dev-i386 \
             lib32stdc++6 lib32z1 \
             lib32gcc-s1 lib32tinfo6 \
             libc6-dev-armhf-cross gcc-arm-linux-gnueabihf \
             g++-arm-linux-gnueabihf \
             libc6-dev-arm64-cross gcc-aarch64-linux-gnu \
             g++-aarch64-linux-gnu \
             libgdbm-dev uuid-dev \
             autotools-dev m4

      - name: System info (env, versions, disk)
        run: |
          mkdir -p logs
          {
            echo "=== ENV ==="; printenv | sort
            echo; echo "=== Versions ==="
            java -version 2>&1 || true
            python --version 2>&1 || true
            pip --version 2>&1 || true
            echo; echo "=== Disk usage ==="
            df -h
          } | tee logs/system_info.txt

      - name: Android SDK/NDK setup (skipped)
        run: |
          echo "Skipping manual Android SDK/NDK setup; buildozer will manage them in ~/.buildozer"

      - name: Install NDK (skipped; buildozer-managed)
        run: |
          echo "Skipping manual NDK installation; buildozer will handle NDK download"

      - name: Install buildozer & Python deps
        run: |
          set -euxo pipefail
          python -m pip install --upgrade pip wheel setuptools cython
          python -m pip install buildozer==1.5.0
          python -m pip install appdirs
          python -m pip install python-for-android
          
          # Проверяем версии установленных пакетов
          echo "=== Installed Python packages ===" | tee -a logs/system_info.txt
          pip list | grep -E "(buildozer|kivy|pillow|reportlab)" | tee -a logs/system_info.txt

      - name: Verify Android SDK installation
        run: |
          set -euo pipefail
          echo "=== Android SDK Verification ===" | tee -a logs/summary.txt
          
          # Проверяем наличие build-tools
          if [ -d "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS" ]; then
            echo "✅ build-tools $ANDROID_BUILD_TOOLS found" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/build-tools/$ANDROID_BUILD_TOOLS/" | tee -a logs/summary.txt
          else
            echo "❌ build-tools $ANDROID_BUILD_TOOLS not found" | tee -a logs/summary.txt
            echo "Available build-tools:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/build-tools/" 2>/dev/null | tee -a logs/summary.txt || echo "No build-tools directory" | tee -a logs/summary.txt
            
            # Попробуем найти любую доступную версию build-tools
            AVAILABLE_BUILD_TOOLS=$(ls "$ANDROID_HOME/build-tools/" 2>/dev/null | head -1 || echo "")
            if [ -n "$AVAILABLE_BUILD_TOOLS" ]; then
              echo "⚠️  Using available build-tools: $AVAILABLE_BUILD_TOOLS" | tee -a logs/summary.txt
              export ANDROID_BUILD_TOOLS="$AVAILABLE_BUILD_TOOLS"
            else
              echo "❌ No build-tools available at all" | tee -a logs/summary.txt
              exit 1
            fi
          fi
          
          # Проверяем наличие aidl
          AIDL_PATH=$(find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null | head -1)
          if [ -n "$AIDL_PATH" ]; then
            echo "✅ aidl found at: $AIDL_PATH" | tee -a logs/summary.txt
            "$AIDL_PATH" --version 2>&1 | tee -a logs/summary.txt || true
          else
            echo "❌ aidl not found" | tee -a logs/summary.txt
            echo "Searching for aidl in all build-tools..." | tee -a logs/summary.txt
            find "$ANDROID_HOME" -name "aidl" -type f 2>/dev/null | tee -a logs/summary.txt || echo "No aidl found anywhere" | tee -a logs/summary.txt
            exit 1
          fi
          
          # Проверяем наличие platforms
          if [ -d "$ANDROID_HOME/platforms/$ANDROID_PLATFORM" ]; then
            echo "✅ platform $ANDROID_PLATFORM found" | tee -a logs/summary.txt
          else
            echo "❌ platform $ANDROID_PLATFORM not found" | tee -a logs/summary.txt
            echo "Available platforms:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/platforms/" 2>/dev/null | tee -a logs/summary.txt || echo "No platforms directory" | tee -a logs/summary.txt
            
            # Попробуем найти любую доступную версию platform
            AVAILABLE_PLATFORM=$(ls "$ANDROID_HOME/platforms/" 2>/dev/null | head -1 || echo "")
            if [ -n "$AVAILABLE_PLATFORM" ]; then
              echo "⚠️  Using available platform: $AVAILABLE_PLATFORM" | tee -a logs/summary.txt
              export ANDROID_PLATFORM="$AVAILABLE_PLATFORM"
              echo "Updated ANDROID_PLATFORM to: $ANDROID_PLATFORM" | tee -a logs/summary.txt
            else
              echo "❌ No platforms available at all" | tee -a logs/summary.txt
              exit 1
            fi
          fi
          
          # Проверяем наличие NDK
          if [ -d "$ANDROID_HOME/ndk/$ANDROID_NDK_VERSION" ]; then
            echo "✅ NDK $ANDROID_NDK_VERSION found" | tee -a logs/summary.txt
          else
            echo "❌ NDK $ANDROID_NDK_VERSION not found" | tee -a logs/summary.txt
            echo "Available NDK versions:" | tee -a logs/summary.txt
            ls -la "$ANDROID_HOME/ndk/" 2>/dev/null | tee -a logs/summary.txt || echo "No ndk directory" | tee -a logs/summary.txt
            exit 1
          fi

      - name: Download DejaVuSans.ttf (for Cyrillic PDF)
        run: |
          set -euxo pipefail
          mkdir -p app/assets/fonts logs
          curl -sSL "https://raw.githubusercontent.com/dejavu-fonts/dejavu-fonts/master/ttf/DejaVuSans.ttf" -o app/assets/fonts/DejaVuSans.ttf
          ls -lh app/assets/fonts | tee -a logs/system_info.txt

      - name: Validate buildozer.spec
        run: |
          set -euo pipefail
          test -f buildozer.spec || { echo "buildozer.spec not found"; exit 1; }
          
          echo "=== buildozer.spec validation ===" | tee -a logs/summary.txt
          head -n 10 buildozer.spec | tee -a logs/summary.txt
          
          # Минимальная проверка ключевых параметров
          python -c "
          import configparser, sys
          cfg = configparser.ConfigParser()
          cfg.read('buildozer.spec', encoding='utf-8')
          
          # Проверяем наличие секций
          assert 'app' in cfg, 'Missing [app] section in buildozer.spec'
          assert 'android' in cfg, 'Missing [android] section in buildozer.spec'
          
          # Проверяем версии Android SDK
          android_api = cfg.get('app', 'android.api', fallback='')
          android_minapi = cfg.get('app', 'android.minapi', fallback='')
          
          print(f'Android API: {android_api}')
          print(f'Android Min API: {android_minapi}')
          
          # Проверяем соответствие только api/minapi
          assert android_api == '32', f'Expected android.api=32, got {android_api}'
          assert android_minapi == '26', f'Expected android.minapi=26, got {android_minapi}'
          
          print('buildozer.spec validation: PASSED')
          " | tee -a logs/summary.txt

      - name: Build APK (verbose, logged)
        env:
          ANDROIDAPI: ${{ env.ANDROIDAPI }}
          ANDROIDMINAPI: ${{ env.ANDROIDMINAPI }}
          GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx2g -Dkotlin.daemon.jvm.options=-Xmx512m -Dorg.gradle.caching=false -Dorg.gradle.daemon=false"
          GRADLE_USER_HOME: "/tmp/gradle-cache"
          GRADLE_DAEMON_OPTS: "-Dorg.gradle.daemon=false"
          BUILDIZER_LOG_LEVEL: ${{ env.BUILDIZER_LOG_LEVEL }}
        run: |
          set -euo pipefail
          mkdir -p logs
          
          # Определяем тип сборки
          BUILD_TYPE="${{ github.event.inputs.build_type || 'debug' }}"
          echo "Building $BUILD_TYPE APK..." | tee -a logs/summary.txt
          
          # Проверяем окружение перед сборкой
          echo "== Pre-build environment check ==" | tee -a logs/buildozer_build.log
          # Buildozer will configure SDK/NDK paths internally
          echo "Current directory: $(pwd)" | tee -a logs/buildozer_build.log
          echo "Python version: $(python --version)" | tee -a logs/buildozer_build.log
          echo "Buildozer version: $(buildozer --version)" | tee -a logs/buildozer_build.log
          
          # Проверяем наличие buildozer.spec
          if [ ! -f "buildozer.spec" ]; then
            echo "ERROR: buildozer.spec not found!" | tee -a logs/buildozer_build.log
            exit 1
          fi
          
          # Очищаем предыдущие сборки и создаем папку bin
          rm -rf bin .buildozer
          mkdir -p bin
          
          # Не трогаем buildozer.spec путями SDK/NDK — ими управляет buildozer
          
          # Не создаем никаких симлинков для SDK — buildozer сам управляет .buildozer
          
          # Проверяем доступность sdkmanager
          echo "== Checking sdkmanager availability ==" | tee -a logs/buildozer_build.log
          if [ -f "$BUILDIZER_SDK_DIR/tools/bin/sdkmanager" ]; then
            echo "✅ sdkmanager found at: $BUILDIZER_SDK_DIR/tools/bin/sdkmanager" | tee -a logs/buildozer_build.log
            "$BUILDIZER_SDK_DIR/tools/bin/sdkmanager" --version | tee -a logs/buildozer_build.log || true
          else
            echo "❌ sdkmanager not found at expected location" | tee -a logs/buildozer_build.log
          fi
          
          # Проверяем aidl
          echo "== Checking aidl availability ==" | tee -a logs/buildozer_build.log
          AIDL_PATH=$(find "$BUILDIZER_SDK_DIR" -name "aidl" -type f 2>/dev/null | head -1 || echo "")
          if [ -n "$AIDL_PATH" ]; then
            echo "✅ aidl found at: $AIDL_PATH" | tee -a logs/buildozer_build.log
          else
            echo "❌ aidl not found in buildozer SDK directory" | tee -a logs/buildozer_build.log
          fi
          
          # Убираем хаки libffi — позволяем p4a собрать libffi сам
          
          # Проверяем buildozer перед сборкой
          echo "== Checking buildozer installation ==" | tee -a logs/buildozer_build.log
          buildozer --version | tee -a logs/buildozer_build.log || echo "buildozer --version failed" | tee -a logs/buildozer_build.log
          which buildozer | tee -a logs/buildozer_build.log
          
          # Проверяем, что buildozer может найти SDK компоненты
          echo "== Checking SDK components availability ==" | tee -a logs/buildozer_build.log
          # Buildozer will configure SDK/NDK paths internally
          echo "Checking if buildozer can find SDK:" | tee -a logs/buildozer_build.log
          buildozer android debug --help 2>&1 | head -20 | tee -a logs/buildozer_build.log || \
            echo "buildozer android debug --help failed" | tee -a logs/buildozer_build.log
          
          # Проверяем buildozer SDK detection
          echo "== Checking buildozer SDK detection ==" | tee -a logs/buildozer_build.log
          echo "Checking buildozer android status:" | tee -a logs/buildozer_build.log
          buildozer android status 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer android status failed" | tee -a logs/buildozer_build.log
          
          # Проверяем наличие исходных файлов приложения
          echo "== Checking application files ==" | tee -a logs/buildozer_build.log
          ls -la app/ | tee -a logs/buildozer_build.log
          echo "Main Python files:" | tee -a logs/buildozer_build.log
          ls -la app/*.py | tee -a logs/buildozer_build.log
          echo "Buildozer spec file:" | tee -a logs/buildozer_build.log
          ls -la buildozer.spec | tee -a logs/buildozer_build.log
          
          # Принудительная очистка buildozer перед сборкой
          echo "== Forcing buildozer clean ==" | tee -a logs/buildozer_build.log
          buildozer android clean 2>&1 | tee -a logs/buildozer_build.log || \
            echo "buildozer clean failed (expected - may need dependencies)" | tee -a logs/buildozer_build.log
          
          # Удаляем кеш buildozer
          echo "== Removing buildozer cache ==" | tee -a logs/buildozer_build.log
          rm -rf .buildozer || true
          
          # Сборка с детальным логированием
          echo "== Starting buildozer build ==" | tee -a logs/buildozer_build.log
          echo "Build type: $BUILD_TYPE" | tee -a logs/buildozer_build.log
          echo "Using command: buildozer -v android $BUILD_TYPE" | tee -a logs/buildozer_build.log
          echo "Current working directory: $(pwd)" | tee -a logs/buildozer_build.log
          echo "Files in current directory:" | tee -a logs/buildozer_build.log
          ls -la | tee -a logs/buildozer_build.log
          
          # Проверяем переменные окружения
          echo "== Environment variables ==" | tee -a logs/buildozer_build.log
          env | grep -E "(ANDROID|P4A|GRADLE|JAVA)" | sort | tee -a logs/buildozer_build.log
          
          # Проверяем доступность buildozer
          echo "== Buildozer availability ==" | tee -a logs/buildozer_build.log
          which buildozer | tee -a logs/buildozer_build.log
          buildozer --version | tee -a logs/buildozer_build.log
          
          # Проверяем наличие файлов приложения
          echo "== Application files check ==" | tee -a logs/buildozer_build.log
          echo "Checking app directory:" | tee -a logs/buildozer_build.log
          ls -la app/ | tee -a logs/buildozer_build.log
          echo "Checking main.py:" | tee -a logs/buildozer_build.log
          ls -la app/main.py | tee -a logs/buildozer_build.log
          echo "Checking buildozer.spec:" | tee -a logs/buildozer_build.log
          ls -la buildozer.spec | tee -a logs/buildozer_build.log
          
          # Попробуем инициализацию buildozer сначала
          echo "== Initializing buildozer ==" | tee -a logs/buildozer_build.log
          buildozer init 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer init failed (may already exist)" | tee -a logs/buildozer_build.log
          
          # Проверяем, что buildozer создал необходимые файлы
          echo "== Checking buildozer initialization ==" | tee -a logs/buildozer_build.log
          ls -la .buildozer/ 2>&1 | tee -a logs/buildozer_build.log || echo ".buildozer directory not found" | tee -a logs/buildozer_build.log
          
          # Проверяем содержимое .buildozer директории
          echo "== Checking .buildozer contents ==" | tee -a logs/buildozer_build.log
          find .buildozer -type f -name "*.py" -o -name "*.json" -o -name "*.txt" 2>/dev/null | \
            head -20 | tee -a logs/buildozer_build.log || \
            echo "No buildozer files found" | tee -a logs/buildozer_build.log
          
          # Проверяем buildozer detection после инициализации
          echo "== Re-checking buildozer SDK detection after init ==" | tee -a logs/buildozer_build.log
          buildozer android debug --help 2>&1 | head -10 | tee -a logs/buildozer_build.log || \
            echo "buildozer android debug --help failed after init" | tee -a logs/buildozer_build.log
          
          # Не трогаем системные autotools — используем стандартную установку
          
          # Попробуем принудительно создать Android проект
          echo "== Forcing Android project creation ==" | tee -a logs/buildozer_build.log
          buildozer android update 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer android update failed" | tee -a logs/buildozer_build.log
          
          # Проверяем, что Android проект создан
          echo "== Checking Android project creation ==" | tee -a logs/buildozer_build.log
          ls -la .buildozer/android/ 2>&1 | tee -a logs/buildozer_build.log || \
            echo ".buildozer/android directory not found" | tee -a logs/buildozer_build.log
          
          # Проверяем содержимое Android проекта
          echo "== Checking Android project contents ==" | tee -a logs/buildozer_build.log
          find .buildozer/android -name "*.gradle*" -o -name "gradle-wrapper.properties" -o -name "AndroidManifest.xml" 2>/dev/null | \
            tee -a logs/buildozer_build.log || \
            echo "No Android project files found" | tee -a logs/buildozer_build.log
          
          # Проверяем buildozer SDK detection после создания проекта
          echo "== Final buildozer SDK detection check ==" | tee -a logs/buildozer_build.log
          buildozer android debug --help 2>&1 | head -10 | tee -a logs/buildozer_build.log || \
            echo "buildozer android debug --help failed after project creation" | tee -a logs/buildozer_build.log
          
          # Попробуем сначала простую команду
          echo "== Attempting buildozer build ==" | tee -a logs/buildozer_build.log
          echo "Current working directory: $(pwd)" | tee -a logs/buildozer_build.log
          echo "Files in current directory:" | tee -a logs/buildozer_build.log
          ls -la | tee -a logs/buildozer_build.log
          
          # Попробуем принудительно создать Android проект
          echo "== Forcing Android project creation ==" | tee -a logs/buildozer_build.log
          buildozer android update 2>&1 | tee -a logs/buildozer_build.log || echo "buildozer android update failed" | tee -a logs/buildozer_build.log
          
          # Проверяем, что Android проект создан
          echo "== Checking Android project creation ==" | tee -a logs/buildozer_build.log
          ls -la .buildozer/android/ 2>&1 | tee -a logs/buildozer_build.log || \
            echo ".buildozer/android directory not found" | tee -a logs/buildozer_build.log
          
          # Проверяем содержимое Android проекта
          echo "== Checking Android project contents ==" | tee -a logs/buildozer_build.log
          find .buildozer/android -name "*.gradle*" -o -name "gradle-wrapper.properties" -o -name "AndroidManifest.xml" 2>/dev/null | \
            tee -a logs/buildozer_build.log || \
            echo "No Android project files found" | tee -a logs/buildozer_build.log
          
          # Проверяем buildozer SDK detection после создания проекта
          echo "== Final buildozer SDK detection check ==" | tee -a logs/buildozer_build.log
          buildozer android debug --help 2>&1 | head -10 | tee -a logs/buildozer_build.log || \
            echo "buildozer android debug --help failed after project creation" | tee -a logs/buildozer_build.log
          

          

          
          if buildozer android $BUILD_TYPE --log-level $BUILDIZER_LOG_LEVEL 2>&1 | tee -a logs/buildozer_build.log; then
            echo "Buildozer command completed successfully" | tee -a logs/summary.txt
          else
            BUILD_EXIT_CODE=$?
            echo "Simple buildozer command failed with exit code: $BUILD_EXIT_CODE" | tee -a logs/summary.txt
            echo "Trying with verbose flag..." | tee -a logs/summary.txt
            
            # Попробуем с verbose флагом
            if buildozer -v android $BUILD_TYPE --log-level $BUILDIZER_LOG_LEVEL 2>&1 | tee -a logs/buildozer_build.log; then
              echo "Buildozer command with verbose completed successfully" | tee -a logs/summary.txt
            else
              BUILD_EXIT_CODE=$?
              echo "Buildozer command with verbose also failed with exit code: $BUILD_EXIT_CODE" | tee -a logs/summary.txt
              echo "Trying with log level 2..." | tee -a logs/summary.txt
              # Попробуем с максимальным уровнем логирования
              if buildozer -v android $BUILD_TYPE --log-level 2 2>&1 | tee -a logs/buildozer_build.log; then
                echo "Buildozer command with log level 2 completed successfully" | tee -a logs/summary.txt
              else
                BUILD_EXIT_CODE=$?
                echo "Buildozer command with log level 2 also failed with exit code: $BUILD_EXIT_CODE" | tee -a logs/summary.txt
                echo "== Last 100 lines of build log ==" | tee -a logs/summary.txt
                tail -100 logs/buildozer_build.log | tee -a logs/summary.txt
                echo "== Full buildozer log for debugging ==" | tee -a logs/summary.txt
                cat logs/buildozer_build.log | tee -a logs/summary.txt
                echo "== Current directory contents ==" | tee -a logs/summary.txt
                ls -la | tee -a logs/summary.txt
                echo "== .buildozer directory contents ==" | tee -a logs/summary.txt
                find .buildozer -type f 2>/dev/null | head -20 | tee -a logs/summary.txt || echo "No .buildozer files found" | tee -a logs/summary.txt
                exit $BUILD_EXIT_CODE
              fi
            fi
          fi
          

          

          
          # Проверяем результат сборки
          echo "== Checking build results ==" | tee -a logs/summary.txt
          echo "Current working directory: $(pwd)" | tee -a logs/summary.txt
          echo "Directory contents:" | tee -a logs/summary.txt
          ls -la | tee -a logs/summary.txt
          
          if [ -d "bin" ] && [ "$(ls -A bin 2>/dev/null)" ]; then
            echo "APK build: SUCCESS - files found in bin/" | tee -a logs/summary.txt
            ls -la bin/ | tee -a logs/summary.txt
            
            # Проверяем конкретные файлы
            APK_FILES=$(find bin -name "*.apk" 2>/dev/null || true)
            AAB_FILES=$(find bin -name "*.aab" 2>/dev/null || true)
            
            if [ -n "$APK_FILES" ]; then
              echo "APK files found:" | tee -a logs/summary.txt
              echo "$APK_FILES" | tee -a logs/summary.txt
            fi
            
            if [ -n "$AAB_FILES" ]; then
              echo "AAB files found:" | tee -a logs/summary.txt
              echo "$AAB_FILES" | tee -a logs/summary.txt
            fi
          else
            echo "APK build: FAILED - no files found in bin/" | tee -a logs/summary.txt
            echo "Checking for any build artifacts..." | tee -a logs/summary.txt
            find . -name "*.apk" -o -name "*.aab" 2>/dev/null | tee -a logs/summary.txt || \
              echo "No APK/AAB files found anywhere" | tee -a logs/summary.txt
            echo "Checking .buildozer directory..." | tee -a logs/summary.txt
            ls -la .buildozer/ 2>/dev/null | tee -a logs/summary.txt || echo ".buildozer directory not found" | tee -a logs/summary.txt
            
            # Дополнительная диагностика
            echo "== Additional diagnostics ==" | tee -a logs/summary.txt
            echo "Checking .buildozer/android directory:" | tee -a logs/summary.txt
            ls -la .buildozer/android/ 2>&1 | tee -a logs/summary.txt || echo ".buildozer/android directory not found" | tee -a logs/summary.txt
            echo "Checking for gradle files:" | tee -a logs/summary.txt
            find . -name "*.gradle*" -o -name "gradle-wrapper.properties" 2>/dev/null | \
              tee -a logs/summary.txt || \
              echo "No gradle files found" | tee -a logs/summary.txt
            echo "Checking for Android project structure:" | tee -a logs/summary.txt
            find . -name "AndroidManifest.xml" -o -name "build.gradle" 2>/dev/null | \
              tee -a logs/summary.txt || \
              echo "No Android project files found" | tee -a logs/summary.txt
            
            # Проверяем, что buildozer действительно запустился
            echo "Checking if buildozer process completed:" | tee -a logs/summary.txt
            if grep -q "Buildozer command completed successfully" logs/buildozer_build.log; then
              echo "Buildozer reported success but no APK found" | tee -a logs/summary.txt
            else
              echo "Buildozer did not report success" | tee -a logs/summary.txt
            fi
            
            echo "Last 100 lines of build log for debugging:" | tee -a logs/summary.txt
            tail -100 logs/buildozer_build.log | tee -a logs/summary.txt
            echo "bin directory contents:" | tee -a logs/summary.txt
            ls -la bin/ 2>/dev/null | tee -a logs/summary.txt || echo "bin directory does not exist" | tee -a logs/summary.txt
            exit 1
          fi

      - name: List build outputs
        run: |
          mkdir -p logs
          echo "=== Build Outputs ===" | tee -a logs/summary.txt
          ls -la bin | tee -a logs/summary.txt || true
          
          # Поиск APK файлов
          echo "Searching APKs:" | tee -a logs/summary.txt
          find . -type f \( -name "*.apk" -o -name "*.aab" \) -maxdepth 6 -print | tee -a logs/summary.txt
          
          # Проверяем размер APK файлов
          if [ -d "bin" ]; then
            echo "=== APK File Sizes ===" | tee -a logs/summary.txt
            find bin -name "*.apk" -exec ls -lh {} \; | tee -a logs/summary.txt
          fi
          
          echo "Build finished at: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" | tee -a logs/summary.txt

      - name: Job summary (quick view)
        if: always()
        run: |
          {
            echo "## CNC Checklist v1.3 – CI Build Summary"
            echo ""
            echo "**Build Type**: ${{ github.event.inputs.build_type || 'debug' }}"
            echo "**System**: Java $(java -version 2>&1 | head -n1), Python $(python --version 2>&1)"
            echo "**Android SDK**: Platform $ANDROID_PLATFORM, Build Tools $ANDROID_BUILD_TOOLS, NDK $ANDROID_NDK_VERSION"
            echo "**SDK root**: managed by buildozer (~/.buildozer)"
            echo ""
            echo "**Build Outputs**:"
            if [ -d "bin" ]; then
              ls -la bin || echo "bin/ directory exists but is empty"
            else
              echo "No bin/ directory found"
            fi
            echo ""
            echo "**Build Status**: ${{ job.status }}"
          } >> $GITHUB_STEP_SUMMARY

      - name: Upload APK/AAB artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cnc-checklist-v1.3-${{ github.event.inputs.build_type || 'debug' }}-apk
          path: |
            bin/*.apk
            bin/*.aab
            .buildozer/**/dists/*/bin/*.apk
            .buildozer/**/dists/*/bin/*.aab
          if-no-files-found: warn
          retention-days: 30

      - name: Upload CI logs (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cnc-checklist-v1.3-ci-logs
          path: |
            logs/**
            .buildozer/**/*.log
            .buildozer/**/build*.txt
            .buildozer/android/platform/python-for-android/*.log
          if-no-files-found: warn
          retention-days: 7

