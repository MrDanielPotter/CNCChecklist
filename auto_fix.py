#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–±–æ—Ä–∫–∏
"""

import os
import sys
import subprocess
import shutil
from typing import List, Dict, Tuple
from pathlib import Path

class AutoFixer:
    def __init__(self):
        self.fixes_applied = []
        self.errors_found = []
    
    def log(self, message: str, level: str = "INFO"):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ü–≤–µ—Ç–∞–º–∏"""
        colors = {
            "INFO": "\033[0;34m",    # Blue
            "SUCCESS": "\033[0;32m", # Green
            "WARNING": "\033[1;33m", # Yellow
            "ERROR": "\033[0;31m",   # Red
            "RESET": "\033[0m"       # Reset
        }
        
        color = colors.get(level, colors["INFO"])
        reset = colors["RESET"]
        print(f"{color}[{level}]{reset} {message}")
    
    def run_command(self, command: str, check: bool = True) -> Tuple[bool, str]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            result = subprocess.run(
                command, 
                shell=True, 
                capture_output=True, 
                text=True, 
                check=check
            )
            return True, result.stdout
        except subprocess.CalledProcessError as e:
            return False, e.stderr
    
    def check_android_sdk(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Android SDK"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ Android SDK...")
        
        android_home = os.getenv('ANDROID_HOME')
        if not android_home:
            self.log("ANDROID_HOME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "ERROR")
            return False
        
        if not os.path.exists(android_home):
            self.log(f"ANDROID_HOME –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {android_home}", "ERROR")
            return False
        
        self.log(f"‚úÖ ANDROID_HOME: {android_home}", "SUCCESS")
        return True
    
    def check_android_ndk(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Android NDK"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ Android NDK...")
        
        ndk_home = os.getenv('ANDROID_NDK_HOME')
        if not ndk_home:
            self.log("ANDROID_NDK_HOME –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "ERROR")
            return False
        
        if not os.path.exists(ndk_home):
            self.log(f"ANDROID_NDK_HOME –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {ndk_home}", "ERROR")
            return False
        
        self.log(f"‚úÖ ANDROID_NDK_HOME: {ndk_home}", "SUCCESS")
        return True
    
    def fix_buildozer_spec(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ buildozer.spec"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ buildozer.spec...")
        
        spec_file = Path("buildozer.spec")
        if not spec_file.exists():
            self.log("buildozer.spec –Ω–µ –Ω–∞–π–¥–µ–Ω", "ERROR")
            return False
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        content = spec_file.read_text(encoding='utf-8')
        original_content = content
        
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        fixes = [
            # –ó–∞–º–µ–Ω–∞ deprecated android.bootstrap –Ω–∞ p4a.bootstrap
            (r'android\.bootstrap\s*=', 'p4a.bootstrap ='),
            # –ó–∞–º–µ–Ω–∞ deprecated android.arch –Ω–∞ android.archs
            (r'android\.arch\s*=', 'android.archs ='),
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è sdl2 bootstrap
            (r'p4a\.bootstrap\s*=\s*webview', 'p4a.bootstrap = sdl2'),
        ]
        
        for pattern, replacement in fixes:
            import re
            if re.search(pattern, content):
                content = re.sub(pattern, replacement, content)
                self.log(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: {pattern} -> {replacement}", "SUCCESS")
                self.fixes_applied.append(f"buildozer.spec: {pattern} -> {replacement}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if content != original_content:
            spec_file.write_text(content, encoding='utf-8')
            self.log("‚úÖ buildozer.spec –∏—Å–ø—Ä–∞–≤–ª–µ–Ω", "SUCCESS")
            return True
        else:
            self.log("‚úÖ buildozer.spec –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π", "SUCCESS")
            return True
    
    def fix_permissions(self) -> bool:
        """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º"""
        self.log("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...")
        
        scripts = [
            "debug_build.sh",
            "test_build_locally.sh",
            "analyze_errors.py",
            "monitor_github_actions.py",
            "auto_fix.py"
        ]
        
        for script in scripts:
            if os.path.exists(script):
                try:
                    os.chmod(script, 0o755)
                    self.log(f"‚úÖ –ü—Ä–∞–≤–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –¥–ª—è {script}", "SUCCESS")
                    self.fixes_applied.append(f"–ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: {script}")
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤ –¥–ª—è {script}: {e}", "ERROR")
                    return False
        
        return True
    
    def clean_build_cache(self) -> bool:
        """–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏"""
        self.log("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏...")
        
        cache_dirs = [".buildozer", "bin"]
        for cache_dir in cache_dirs:
            if os.path.exists(cache_dir):
                try:
                    shutil.rmtree(cache_dir)
                    self.log(f"‚úÖ –£–¥–∞–ª–µ–Ω –∫—ç—à: {cache_dir}", "SUCCESS")
                    self.fixes_applied.append(f"–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞: {cache_dir}")
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {cache_dir}: {e}", "ERROR")
                    return False
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é bin
        os.makedirs("bin", exist_ok=True)
        self.log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è bin", "SUCCESS")
        
        return True
    
    def fix_environment_variables(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        required_vars = {
            'ANDROID_HOME': os.getenv('ANDROID_HOME'),
            'ANDROID_NDK_HOME': os.getenv('ANDROID_NDK_HOME'),
            'ANDROID_SDK_ROOT': os.getenv('ANDROID_SDK_ROOT')
        }
        
        missing_vars = []
        for var, value in required_vars.items():
            if not value:
                missing_vars.append(var)
            else:
                self.log(f"‚úÖ {var}: {value}", "SUCCESS")
        
        if missing_vars:
            self.log(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}", "ERROR")
            self.log("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:", "WARNING")
            for var in missing_vars:
                self.log(f"  export {var}=/path/to/{var.lower()}", "WARNING")
            return False
        
        return True
    
    def install_missing_dependencies(self) -> bool:
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π Python...")
        
        required_packages = ['buildozer', 'kivy', 'requests']
        missing_packages = []
        
        for package in required_packages:
            success, _ = self.run_command(f"python -c 'import {package}'", check=False)
            if not success:
                missing_packages.append(package)
        
        if missing_packages:
            self.log(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø–∞–∫–µ—Ç–æ–≤: {', '.join(missing_packages)}", "WARNING")
            for package in missing_packages:
                success, output = self.run_command(f"pip install {package}", check=False)
                if success:
                    self.log(f"‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω {package}", "SUCCESS")
                    self.fixes_applied.append(f"–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç: {package}")
                else:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ {package}: {output}", "ERROR")
                    return False
        else:
            self.log("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", "SUCCESS")
        
        return True
    
    def create_logs_directory(self) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤"""
        self.log("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ª–æ–≥–æ–≤...")
        
        try:
            os.makedirs("logs", exist_ok=True)
            self.log("‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs —Å–æ–∑–¥–∞–Ω–∞", "SUCCESS")
            self.fixes_applied.append("–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è logs")
            return True
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ logs: {e}", "ERROR")
            return False
    
    def run_all_fixes(self) -> bool:
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π"""
        self.log("üîß –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...", "INFO")
        self.log("=" * 50, "INFO")
        
        fixes = [
            ("–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤", self.create_logs_directory),
            ("–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞", self.fix_permissions),
            ("–û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏", self.clean_build_cache),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ buildozer.spec", self.fix_buildozer_spec),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è", self.fix_environment_variables),
            ("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π", self.install_missing_dependencies),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Android SDK", self.check_android_sdk),
            ("–ü—Ä–æ–≤–µ—Ä–∫–∞ Android NDK", self.check_android_ndk),
        ]
        
        all_success = True
        
        for fix_name, fix_func in fixes:
            self.log(f"\nüîß {fix_name}...", "INFO")
            try:
                success = fix_func()
                if not success:
                    all_success = False
                    self.errors_found.append(fix_name)
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –≤ {fix_name}: {e}", "ERROR")
                all_success = False
                self.errors_found.append(fix_name)
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        self.log("\n" + "=" * 50, "INFO")
        self.log("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢", "INFO")
        self.log("=" * 50, "INFO")
        
        if self.fixes_applied:
            self.log(f"‚úÖ –ü—Ä–∏–º–µ–Ω–µ–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π: {len(self.fixes_applied)}", "SUCCESS")
            for fix in self.fixes_applied:
                self.log(f"  ‚Ä¢ {fix}", "SUCCESS")
        
        if self.errors_found:
            self.log(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {len(self.errors_found)}", "ERROR")
            for error in self.errors_found:
                self.log(f"  ‚Ä¢ {error}", "ERROR")
        
        if all_success:
            self.log("\nüéâ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!", "SUCCESS")
            self.log("–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: make debug", "INFO")
        else:
            self.log("\n‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å", "WARNING")
            self.log("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –≤—Ä—É—á–Ω—É—é", "WARNING")
        
        return all_success

def main():
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –æ—à–∏–±–æ–∫ —Å–±–æ—Ä–∫–∏")
        print()
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python auto_fix.py          # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        print("  python auto_fix.py --help   # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        print()
        print("–ß—Ç–æ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:")
        print("  ‚Ä¢ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∫—Ä–∏–ø—Ç–∞–º")
        print("  ‚Ä¢ –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–±–æ—Ä–∫–∏")
        print("  ‚Ä¢ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ buildozer.spec")
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("  ‚Ä¢ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π")
        print("  ‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ Android SDK/NDK")
        return
    
    fixer = AutoFixer()
    success = fixer.run_all_fixes()
    
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
